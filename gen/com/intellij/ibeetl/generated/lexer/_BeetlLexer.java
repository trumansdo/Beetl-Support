/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.intellij.ibeetl.generated.lexer;

import com.intellij.ibeetl.lang.lexer.BeetlTokenTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.WHITE_SPACE;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>beetl.flex</tt>
 */
public class _BeetlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BTL_LEX = 2;
  public static final int BTL_HTML_LEX = 4;
  public static final int BTL_PLACEHOLDER = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14864 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\24\1\25\3\24\1\25\71\24\1\26\1\24\1\27\1\30"+
    "\1\31\1\32\2\30\16\0\1\33\1\20\1\34\1\35\2\24\1\36\11\24\1\37\21\24\1\40\1"+
    "\41\23\24\1\30\1\42\3\24\1\25\1\43\1\42\4\24\1\44\1\45\4\0\1\46\1\47\1\30"+
    "\3\24\2\50\1\30\1\51\1\52\1\0\1\53\5\24\1\54\3\0\1\55\1\56\13\24\1\57\1\46"+
    "\1\60\1\61\1\0\1\62\1\30\1\63\1\64\3\24\3\0\1\65\12\24\1\66\1\0\1\67\1\30"+
    "\1\0\1\70\3\24\1\54\1\71\1\23\2\24\1\66\1\72\1\73\1\74\2\30\3\24\1\75\10\30"+
    "\1\76\1\31\6\30\1\77\2\0\1\100\1\101\6\24\1\102\2\0\1\103\1\24\1\104\1\0\2"+
    "\42\1\105\1\106\1\107\2\24\1\76\1\110\1\111\1\112\1\113\1\63\1\114\1\104\1"+
    "\0\1\115\1\52\1\105\1\116\1\107\2\24\1\76\1\117\1\120\1\121\1\122\1\123\1"+
    "\124\1\125\1\0\1\126\1\30\1\105\1\37\1\36\2\24\1\76\1\127\1\111\1\46\1\130"+
    "\1\131\1\30\1\104\1\0\1\43\1\30\1\105\1\106\1\107\2\24\1\76\1\127\1\111\1"+
    "\112\1\122\1\125\1\114\1\104\1\0\1\43\1\30\1\132\1\133\1\134\1\135\1\136\1"+
    "\133\1\24\1\137\1\140\1\141\1\142\1\30\1\125\1\0\1\30\1\43\1\105\1\33\1\76"+
    "\2\24\1\76\1\143\1\144\1\145\1\141\1\146\1\27\1\104\1\0\2\30\1\147\1\33\1"+
    "\76\2\24\1\76\1\143\1\111\1\145\1\141\1\146\1\34\1\104\1\0\1\150\1\30\1\147"+
    "\1\33\1\76\4\24\1\151\1\145\1\152\1\63\1\30\1\104\1\0\1\30\1\41\1\147\1\24"+
    "\1\25\1\41\2\24\1\36\1\153\1\25\1\154\1\155\1\0\2\30\1\156\1\30\1\42\5\24"+
    "\1\157\1\160\1\161\1\100\1\0\1\162\4\30\1\163\1\164\1\165\1\42\1\166\1\167"+
    "\1\157\1\170\1\171\1\172\1\0\1\173\4\30\1\131\2\30\1\162\1\0\1\162\1\174\1"+
    "\175\1\24\1\42\3\24\1\31\1\45\1\0\1\145\1\176\1\0\1\45\3\0\1\51\1\177\7\30"+
    "\5\24\1\54\1\0\1\200\1\0\1\162\1\66\1\201\1\202\1\203\1\204\1\24\1\205\1\206"+
    "\1\0\1\172\4\24\1\37\1\22\5\24\1\207\51\24\1\134\1\25\1\134\5\24\1\134\4\24"+
    "\1\134\1\25\1\134\1\24\1\25\7\24\1\134\10\24\1\210\4\30\2\24\2\30\12\24\1"+
    "\31\1\30\1\42\114\24\1\106\2\24\1\42\2\24\1\50\11\24\1\133\1\131\1\30\1\24"+
    "\1\33\1\211\1\30\2\24\1\211\1\30\2\24\1\212\1\30\1\24\1\33\1\213\1\30\6\24"+
    "\1\214\3\0\1\215\1\216\1\0\1\162\3\30\1\217\1\0\1\162\13\24\1\30\5\24\1\220"+
    "\10\24\1\221\1\30\3\24\1\31\1\0\1\2\1\0\1\2\1\125\1\0\3\24\1\221\1\31\1\30"+
    "\5\24\1\115\2\0\1\56\1\162\1\0\1\162\4\30\2\24\1\161\1\2\6\24\1\176\1\100"+
    "\3\0\1\112\1\0\1\162\1\0\1\162\1\44\13\30\1\222\5\24\1\214\1\0\1\222\1\115"+
    "\1\0\1\162\1\30\1\223\1\2\1\30\1\224\3\24\1\103\1\203\1\0\1\70\4\24\1\66\1"+
    "\0\1\2\1\30\4\24\1\214\2\0\1\30\1\0\1\225\1\0\1\70\3\24\1\221\12\30\1\226"+
    "\2\0\1\227\1\230\1\30\30\24\4\0\1\100\2\30\1\77\42\24\2\221\4\24\2\221\1\24"+
    "\1\231\3\24\1\221\6\24\1\33\1\171\1\232\1\31\1\233\1\115\1\24\1\31\1\232\1"+
    "\31\1\30\1\223\3\30\1\234\1\30\1\44\1\131\1\30\1\235\1\30\1\51\1\236\1\43"+
    "\1\44\2\30\1\24\1\31\3\24\1\50\2\30\1\0\1\51\1\237\1\0\1\240\1\30\1\241\1"+
    "\41\1\153\1\242\1\32\1\243\1\24\1\244\1\245\1\246\2\30\5\24\1\131\116\30\5"+
    "\24\1\25\5\24\1\25\20\24\1\31\1\247\1\250\1\30\4\24\1\37\1\22\7\24\1\44\1"+
    "\30\1\63\2\24\1\25\1\30\10\25\4\0\5\30\1\44\72\30\1\245\3\30\1\42\1\205\1"+
    "\242\1\31\1\42\11\24\1\25\1\251\1\42\12\24\1\207\1\245\4\24\1\221\1\42\12"+
    "\24\1\25\2\30\3\24\1\50\6\30\170\24\1\221\11\30\71\24\1\31\6\30\21\24\1\31"+
    "\10\30\5\24\1\221\41\24\1\31\2\24\1\0\1\250\2\30\5\24\1\161\1\77\1\252\3\24"+
    "\1\63\12\24\1\162\3\30\1\44\1\24\1\41\14\24\1\253\1\115\1\30\1\24\1\50\11"+
    "\30\1\24\1\254\1\255\2\24\1\54\2\30\1\131\6\24\1\115\1\30\1\70\5\24\1\214"+
    "\1\0\1\51\1\30\1\0\1\162\2\0\1\70\1\52\1\0\1\70\2\24\1\66\1\172\2\24\1\161"+
    "\1\0\1\2\1\30\3\24\1\31\1\101\5\24\1\54\1\0\1\240\1\44\1\0\1\162\4\30\5\24"+
    "\1\103\1\100\1\30\1\255\1\256\1\0\1\162\2\24\1\25\1\257\6\24\1\202\1\260\1"+
    "\220\2\30\1\261\1\24\1\54\1\262\1\30\3\263\1\30\2\25\22\30\4\24\1\54\1\264"+
    "\1\0\1\162\64\24\1\115\1\30\2\24\1\25\1\265\5\24\1\115\40\30\55\24\1\221\15"+
    "\24\1\27\4\30\1\25\1\30\1\265\1\266\1\24\1\76\1\25\1\171\1\267\15\24\1\27"+
    "\3\30\1\265\54\24\1\221\2\30\10\24\1\41\6\24\5\30\1\24\1\31\2\0\2\30\1\100"+
    "\1\30\1\136\2\30\1\245\3\30\1\43\1\33\20\24\1\270\1\235\1\30\1\0\1\162\1\42"+
    "\2\24\1\116\1\42\2\24\1\50\1\271\12\24\1\25\3\41\1\272\1\273\2\30\1\274\1"+
    "\24\1\143\2\24\1\25\2\24\1\275\1\24\1\221\1\24\1\221\4\30\17\24\1\50\10\30"+
    "\6\24\1\31\20\30\1\276\20\30\3\24\1\31\6\24\1\131\5\30\3\24\1\25\2\30\3\24"+
    "\1\50\6\30\3\24\1\221\4\24\1\115\1\24\1\242\5\30\23\24\1\221\1\0\1\162\52"+
    "\30\1\221\1\76\4\24\1\37\1\277\2\24\1\221\25\30\2\24\1\221\1\30\3\24\1\27"+
    "\10\30\7\24\1\271\10\30\1\300\1\77\1\143\1\42\2\24\1\115\1\121\4\30\3\24\1"+
    "\31\20\30\6\24\1\221\1\30\2\24\1\221\1\30\2\24\1\50\21\30\11\24\1\131\66\30"+
    "\1\224\6\24\1\0\1\100\3\30\1\125\1\0\2\30\1\224\5\24\1\0\1\301\2\30\3\24\1"+
    "\131\1\0\1\162\1\224\3\24\1\161\1\0\1\145\1\0\10\30\1\224\5\24\1\54\1\0\1"+
    "\302\1\30\1\0\1\162\24\30\5\24\1\54\1\0\1\30\1\0\1\162\46\30\55\24\1\25\22"+
    "\30\14\24\1\50\63\30\5\24\1\25\72\30\7\24\1\131\130\30\10\24\1\31\1\30\1\103"+
    "\4\0\1\100\1\30\1\63\1\224\1\24\14\30\1\27\153\30\1\303\1\304\2\0\1\305\1"+
    "\2\3\30\1\306\22\30\1\307\67\30\12\24\1\33\10\24\1\33\1\310\1\311\1\24\1\312"+
    "\1\143\7\24\1\37\1\313\2\33\3\24\1\314\1\171\1\41\1\76\51\24\1\221\3\24\1"+
    "\76\2\24\1\207\3\24\1\207\2\24\1\33\3\24\1\33\2\24\1\25\3\24\1\25\3\24\1\76"+
    "\3\24\1\76\2\24\1\207\1\315\6\0\1\143\3\24\1\163\1\42\1\207\1\316\1\241\1"+
    "\317\1\163\1\231\1\163\2\207\1\124\1\24\1\36\1\24\1\115\1\320\1\36\1\24\1"+
    "\115\50\30\32\24\1\25\5\30\106\24\1\31\1\30\33\24\1\221\74\30\1\123\3\30\14"+
    "\0\20\30\36\0\2\30");

  /* The ZZ_CMAP_A table has 1672 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\26\1\4\1\2\2\5\1\3\6\26\4\0\1\4\1\47\1\30\1\106\1\25\1\54\1\51\1\32\1"+
    "\41\1\42\1\7\1\24\1\45\1\20\1\21\1\6\1\14\7\12\2\10\1\43\1\44\1\52\1\46\1"+
    "\55\1\113\1\104\2\11\1\100\1\75\1\17\1\11\1\25\1\13\1\76\6\25\1\23\1\25\1"+
    "\77\1\25\1\101\1\25\1\102\1\25\1\16\2\25\1\37\1\31\1\40\1\53\1\25\1\0\1\61"+
    "\1\56\1\65\1\70\1\60\1\33\1\110\1\74\1\67\1\107\1\62\1\71\1\111\1\34\1\66"+
    "\1\22\1\25\1\57\1\72\1\63\1\64\1\103\1\73\1\15\1\105\1\25\1\35\1\50\1\36\1"+
    "\112\6\26\1\27\2\26\2\0\4\25\4\0\1\25\2\0\1\26\7\0\1\25\4\0\1\25\5\0\17\25"+
    "\1\0\2\25\4\0\4\25\16\0\5\25\7\0\1\25\1\0\1\25\1\0\5\25\1\0\2\25\6\0\1\25"+
    "\1\0\3\25\1\0\1\25\1\0\4\25\1\0\13\25\1\0\3\25\1\0\5\26\2\0\6\25\1\0\7\25"+
    "\1\0\1\25\15\0\1\25\1\0\15\26\1\0\1\26\1\0\2\26\1\0\2\26\1\0\1\26\3\25\5\0"+
    "\5\26\6\0\1\25\4\0\3\26\5\0\3\25\7\26\4\0\2\25\1\26\13\25\1\0\1\25\7\26\2"+
    "\25\2\26\1\0\4\26\2\25\2\26\3\25\2\0\1\25\7\0\1\26\1\25\1\26\6\25\3\26\2\0"+
    "\11\25\3\26\1\25\6\0\2\26\6\25\4\26\2\25\2\0\2\26\1\25\11\26\1\25\3\26\1\25"+
    "\5\26\2\0\1\25\3\26\4\0\1\25\1\0\6\25\4\0\13\26\1\0\4\26\6\25\3\26\1\25\2"+
    "\26\1\25\7\26\2\25\2\26\2\0\2\26\1\0\3\26\1\0\10\25\2\0\2\25\2\0\6\25\1\0"+
    "\1\25\3\0\4\25\2\0\1\26\1\25\7\26\2\0\2\26\2\0\3\26\1\25\5\0\2\25\1\0\5\25"+
    "\4\0\3\25\4\0\2\25\1\0\2\25\1\0\2\25\1\0\2\25\2\0\1\26\1\0\5\26\4\0\2\26\2"+
    "\0\3\26\3\0\1\26\7\0\4\25\1\0\1\25\7\0\4\26\3\25\1\26\2\0\1\25\1\0\2\25\1"+
    "\0\3\25\2\26\1\0\3\26\2\0\1\25\11\0\1\26\1\25\1\0\6\25\3\0\3\25\1\0\4\25\3"+
    "\0\2\25\1\0\1\25\1\0\2\25\3\0\2\25\3\0\2\25\4\0\5\26\3\0\3\26\1\0\4\26\2\0"+
    "\1\25\6\0\1\26\4\25\1\0\5\25\3\0\1\25\7\26\1\0\2\26\5\0\2\26\3\0\2\26\1\0"+
    "\3\25\1\0\2\25\5\0\3\25\2\0\1\25\3\26\1\0\4\26\1\25\1\0\4\25\1\0\1\25\4\0"+
    "\1\26\4\0\6\26\1\0\1\26\3\0\2\26\4\0\1\25\1\26\2\25\7\26\4\0\10\25\3\26\7"+
    "\0\2\25\1\0\1\25\2\0\2\25\1\0\1\25\2\0\1\25\6\0\4\25\1\0\3\25\1\0\1\25\1\0"+
    "\1\25\2\0\2\25\1\0\3\25\2\26\1\0\2\26\1\25\2\0\5\25\1\0\1\25\1\0\6\26\2\0"+
    "\2\26\2\0\4\25\5\0\1\26\1\0\1\26\1\0\1\26\4\0\2\26\5\25\3\26\6\0\1\26\1\0"+
    "\7\26\1\25\2\26\4\25\3\26\1\25\3\26\2\25\7\26\3\25\4\26\5\25\14\26\1\25\1"+
    "\26\3\25\1\0\7\25\2\0\3\26\2\25\3\26\3\0\2\25\2\26\4\0\1\25\1\0\2\26\4\0\4"+
    "\25\10\26\3\0\1\25\3\0\2\25\1\26\5\0\3\26\2\0\1\25\1\26\1\25\5\0\6\25\2\0"+
    "\5\26\3\25\3\0\10\26\5\25\2\26\3\0\3\25\3\26\1\0\5\26\4\25\1\26\4\25\3\26"+
    "\2\25\2\0\1\25\1\0\1\25\1\0\1\25\1\0\1\25\2\0\3\25\1\0\6\25\2\0\2\25\2\1\5"+
    "\26\5\0\1\25\5\0\6\26\1\0\1\26\3\0\4\26\11\0\1\25\4\0\1\25\1\0\5\25\2\0\1"+
    "\25\1\0\4\25\1\0\3\25\2\0\4\25\5\0\5\25\4\0\1\25\4\0\4\25\3\26\2\25\5\0\2"+
    "\26\2\0\3\25\6\26\1\0\2\25\2\0\4\25\1\0\2\25\1\26\3\25\1\26\4\25\1\26\10\25"+
    "\2\26\4\0\1\25\1\26\4\0\1\26\5\25\2\26\3\0\3\25\4\0\3\25\2\26\2\0\6\25\1\0"+
    "\3\26\1\0\2\26\5\0\5\25\5\0\1\25\1\26\3\25\1\0\2\25\1\0\7\25\2\0\1\26\6\0"+
    "\2\25\2\0\3\25\3\0\2\25\3\0\2\25\2\0\3\26\4\0\3\25\1\0\2\25\1\0\1\25\5\0\1"+
    "\26\2\0\1\25\3\0\1\25\2\0\2\25\3\26\1\0\2\26\1\0\3\26\2\0\1\26\2\0\1\26\4"+
    "\25\10\0\5\26\3\0\6\26\2\0\3\26\2\0\4\26\4\0\3\26\5\0\1\25\2\0\2\25\2\0\4"+
    "\25\1\0\4\25\1\0\1\25\1\0\6\25\2\0\5\25\1\0\4\25\1\0\4\25\2\0\2\26\1\0\1\25"+
    "\1\0\1\25\5\0\1\25\1\0\1\25\1\0\3\25\1\0\3\25\1\0\3\25");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\2\3\1\1\2\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\10\1\12\1\13\1\14\2\1"+
    "\2\11\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\13\11\1\36\1\1\1\37\1\5\1\40"+
    "\1\4\2\1\1\26\1\6\1\7\2\10\1\12\1\13"+
    "\1\14\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\41\1\42\1\43\1\44\1\45\1\0\1\45\1\0"+
    "\1\46\1\0\1\47\1\50\1\51\1\52\1\53\1\0"+
    "\1\54\3\0\3\11\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\6\11"+
    "\1\71\1\72\7\11\4\0\1\73\3\0\1\42\1\45"+
    "\1\0\1\74\3\0\1\11\1\75\5\11\1\76\12\11"+
    "\1\77\5\0\1\42\1\0\1\74\2\0\1\11\1\100"+
    "\2\11\1\101\1\102\1\11\1\103\11\11\7\0\1\104"+
    "\1\105\2\11\1\106\1\11\1\107\5\11\1\110\1\11"+
    "\1\111\1\0\1\112\2\0\1\113\5\11\1\114\1\115"+
    "\1\11\1\0\1\116\2\11\1\117\2\11\1\0\1\120"+
    "\3\11\1\0\1\121\1\122\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\u0214"+
    "\0\u0260\0\u0130\0\u02ac\0\u02f8\0\u0344\0\u0390\0\u03dc\0\u0428"+
    "\0\u0474\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c\0\u0688"+
    "\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130"+
    "\0\u0130\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u0804\0\u0850\0\u089c"+
    "\0\u08e8\0\u0934\0\u0980\0\u09cc\0\u0a18\0\u0a64\0\u0ab0\0\u0afc"+
    "\0\u0b48\0\u0b94\0\u0be0\0\u0c2c\0\u0c78\0\u0cc4\0\u0130\0\u0130"+
    "\0\u0d10\0\u0d10\0\u0d5c\0\u0da8\0\u0130\0\u0130\0\u0130\0\u0df4"+
    "\0\u0130\0\u0e40\0\u0e8c\0\u0ed8\0\u0f24\0\u0f70\0\u0fbc\0\u0130"+
    "\0\u0130\0\u1008\0\u0130\0\u1054\0\u10a0\0\u0130\0\u0130\0\u0130"+
    "\0\u10ec\0\u1138\0\u1184\0\u11d0\0\u121c\0\u0130\0\u0130\0\u0130"+
    "\0\u0130\0\u0130\0\u05a4\0\u0130\0\u1268\0\u05f0\0\u12b4\0\u1300"+
    "\0\u134c\0\u1398\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130"+
    "\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130\0\u0130\0\u13e4\0\u1430"+
    "\0\u147c\0\u14c8\0\u1514\0\u1560\0\u0428\0\u15ac\0\u15f8\0\u1644"+
    "\0\u1690\0\u16dc\0\u1728\0\u1774\0\u17c0\0\u180c\0\u1858\0\u18a4"+
    "\0\u0d5c\0\u0130\0\u18f0\0\u0da8\0\u193c\0\u1988\0\u19d4\0\u1a20"+
    "\0\u1a6c\0\u1ab8\0\u1b04\0\u1b50\0\u1b9c\0\u0428\0\u1be8\0\u1c34"+
    "\0\u1c80\0\u1ccc\0\u1d18\0\u0428\0\u1d64\0\u1db0\0\u1dfc\0\u1e48"+
    "\0\u1e94\0\u1ee0\0\u1f2c\0\u1f78\0\u1fc4\0\u2010\0\u0428\0\u205c"+
    "\0\u20a8\0\u20f4\0\u2140\0\u218c\0\u0130\0\u1988\0\u0130\0\u21d8"+
    "\0\u2224\0\u2270\0\u0428\0\u22bc\0\u2308\0\u2354\0\u0428\0\u23a0"+
    "\0\u0428\0\u23ec\0\u2438\0\u2484\0\u24d0\0\u251c\0\u2568\0\u25b4"+
    "\0\u2600\0\u264c\0\u2698\0\u26e4\0\u2730\0\u277c\0\u27c8\0\u2814"+
    "\0\u2860\0\u0428\0\u0428\0\u28ac\0\u28f8\0\u0428\0\u2944\0\u0428"+
    "\0\u2990\0\u29dc\0\u2a28\0\u2a74\0\u2ac0\0\u0428\0\u2b0c\0\u0130"+
    "\0\u2b58\0\u0130\0\u2ba4\0\u2bf0\0\u0428\0\u2c3c\0\u2c88\0\u2cd4"+
    "\0\u2d20\0\u2d6c\0\u0428\0\u0428\0\u2db8\0\u2e04\0\u0428\0\u2e50"+
    "\0\u2e9c\0\u0428\0\u2ee8\0\u2f34\0\u2f80\0\u0428\0\u2fcc\0\u3018"+
    "\0\u3064\0\u30b0\0\u0428\0\u0428\0\u0130";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\3\6\1\7\1\10\1\11\20\5\1\6\65\5"+
    "\2\12\1\13\2\14\1\15\1\16\1\17\1\20\1\17"+
    "\1\20\1\21\3\20\1\22\1\23\2\20\1\24\1\20"+
    "\1\5\1\12\1\25\1\5\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\2\20\1\55\1\20\1\56\1\20"+
    "\1\57\1\60\1\20\1\61\1\62\1\20\1\63\5\20"+
    "\1\64\1\65\1\20\1\66\3\20\1\5\1\67\1\5"+
    "\2\12\1\13\2\70\1\11\1\5\11\71\1\5\2\71"+
    "\1\5\2\71\1\72\1\73\1\5\1\74\2\71\6\5"+
    "\1\37\2\5\1\75\7\5\26\71\1\5\1\71\1\5"+
    "\3\71\3\5\3\0\2\70\1\76\1\77\1\100\1\20"+
    "\1\100\1\20\1\101\3\20\1\102\1\103\2\20\1\104"+
    "\1\20\1\5\1\0\1\25\1\5\1\26\2\20\2\5"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\105\1\106\1\107\1\110\1\111\1\112\26\20"+
    "\1\113\1\20\1\5\3\20\1\5\1\67\115\0\3\6"+
    "\1\0\1\6\21\0\1\6\70\0\2\7\107\0\3\6"+
    "\1\7\1\10\21\0\1\6\72\0\1\114\1\115\106\0"+
    "\1\12\115\0\2\14\114\0\1\114\1\115\36\0\1\116"+
    "\113\0\1\117\55\0\1\17\1\0\1\17\1\120\1\17"+
    "\2\0\1\121\1\0\1\122\36\0\1\121\13\0\1\120"+
    "\27\0\10\20\2\0\2\20\1\0\3\20\3\0\2\20"+
    "\21\0\26\20\1\0\1\20\1\0\3\20\12\0\1\123"+
    "\1\0\1\124\1\120\1\124\2\125\1\121\1\0\1\122"+
    "\36\0\1\121\13\0\1\120\37\0\1\126\25\0\1\127"+
    "\55\0\1\122\1\0\1\122\1\0\1\122\75\0\1\130"+
    "\25\0\1\131\21\0\1\132\45\0\2\133\2\0\24\133"+
    "\1\134\1\135\1\0\61\133\2\136\2\0\24\136\1\0"+
    "\1\137\1\134\61\136\10\0\10\20\2\0\2\20\1\0"+
    "\3\20\3\0\2\20\21\0\3\20\1\140\4\20\1\141"+
    "\15\20\1\0\1\20\1\0\3\20\12\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\6\20\1\142"+
    "\17\20\1\0\1\20\1\0\3\20\50\0\1\143\113\0"+
    "\1\144\113\0\1\145\1\0\1\146\111\0\1\147\2\0"+
    "\1\150\110\0\1\151\3\0\1\152\107\0\1\153\113\0"+
    "\1\154\113\0\1\155\6\0\1\156\46\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\1\20\1\157"+
    "\24\20\1\0\1\20\1\0\3\20\12\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\2\20\1\160"+
    "\23\20\1\0\1\20\1\0\3\20\12\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\13\20\1\161"+
    "\12\20\1\0\1\20\1\0\3\20\12\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\1\20\1\162"+
    "\24\20\1\0\1\20\1\0\3\20\12\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\3\20\1\163"+
    "\4\20\1\164\15\20\1\0\1\20\1\0\3\20\12\0"+
    "\10\20\2\0\2\20\1\0\3\20\3\0\1\165\1\166"+
    "\21\0\26\20\1\0\1\20\1\0\3\20\12\0\10\20"+
    "\2\0\2\20\1\0\3\20\3\0\2\20\21\0\2\20"+
    "\1\167\6\20\1\170\14\20\1\0\1\20\1\0\3\20"+
    "\12\0\10\20\2\0\2\20\1\0\3\20\3\0\2\20"+
    "\21\0\2\20\1\171\12\20\1\172\10\20\1\0\1\20"+
    "\1\0\3\20\12\0\10\20\2\0\2\20\1\0\3\20"+
    "\3\0\2\20\21\0\16\20\1\173\7\20\1\0\1\20"+
    "\1\0\3\20\12\0\10\20\2\0\2\20\1\0\3\20"+
    "\3\0\2\20\21\0\20\20\1\174\5\20\1\0\1\20"+
    "\1\0\3\20\12\0\10\20\2\0\2\20\1\0\3\20"+
    "\3\0\2\20\21\0\3\20\1\175\22\20\1\0\1\20"+
    "\1\0\3\20\65\0\1\176\63\0\1\177\25\0\1\200"+
    "\42\0\11\71\1\0\2\71\1\0\3\71\3\0\2\71"+
    "\21\0\26\71\1\0\1\71\1\0\3\71\2\0\2\201"+
    "\2\0\24\201\1\202\1\203\62\201\2\204\2\0\25\204"+
    "\1\205\1\202\61\204\10\0\1\100\1\0\1\100\1\101"+
    "\1\100\57\0\1\101\37\0\1\126\205\0\1\130\25\0"+
    "\1\131\137\0\1\146\114\0\1\150\114\0\1\152\116\0"+
    "\1\156\36\0\2\114\2\0\110\114\7\115\1\206\104\115"+
    "\10\0\1\207\1\0\1\207\1\0\1\207\3\0\1\210"+
    "\3\0\1\210\77\0\1\122\1\0\1\122\1\120\1\122"+
    "\2\0\1\121\40\0\1\121\13\0\1\120\27\0\1\123"+
    "\1\0\1\123\1\120\1\123\2\0\1\121\1\0\1\122"+
    "\36\0\1\121\13\0\1\120\27\0\1\123\1\0\1\124"+
    "\1\120\1\124\2\0\1\121\1\0\1\122\36\0\1\121"+
    "\13\0\1\120\27\0\3\211\1\0\1\211\2\0\1\211"+
    "\1\0\1\212\2\121\7\0\1\211\22\0\1\211\1\0"+
    "\2\211\3\0\1\211\2\0\1\211\4\0\1\211\2\0"+
    "\1\211\23\0\2\213\1\133\1\0\1\133\2\0\1\213"+
    "\10\0\5\133\21\0\2\133\2\213\1\0\1\133\1\0"+
    "\1\213\2\0\1\213\4\0\1\213\2\0\1\213\23\0"+
    "\2\214\1\136\1\0\1\136\2\0\1\214\10\0\5\136"+
    "\21\0\2\136\2\214\1\0\1\136\1\0\1\214\2\0"+
    "\1\214\4\0\1\214\2\0\1\214\23\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\13\20\1\215"+
    "\12\20\1\0\1\20\1\0\3\20\12\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\1\20\1\216"+
    "\24\20\1\0\1\20\1\0\3\20\12\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\13\20\1\217"+
    "\12\20\1\0\1\20\1\0\3\20\12\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\2\20\1\220"+
    "\23\20\1\0\1\20\1\0\3\20\12\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\5\20\1\221"+
    "\20\20\1\0\1\20\1\0\3\20\12\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\14\20\1\222"+
    "\11\20\1\0\1\20\1\0\3\20\12\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\6\20\1\223"+
    "\17\20\1\0\1\224\1\0\3\20\12\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\5\20\1\225"+
    "\6\20\1\226\11\20\1\0\1\20\1\0\3\20\12\0"+
    "\10\20\2\0\2\20\1\0\3\20\3\0\1\20\1\227"+
    "\21\0\26\20\1\0\1\20\1\0\3\20\12\0\10\20"+
    "\2\0\2\20\1\0\3\20\3\0\2\20\21\0\5\20"+
    "\1\230\20\20\1\0\1\20\1\0\3\20\12\0\10\20"+
    "\2\0\2\20\1\0\3\20\3\0\1\231\1\20\21\0"+
    "\26\20\1\0\1\20\1\0\3\20\12\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\1\20\1\232"+
    "\24\20\1\0\1\20\1\0\3\20\12\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\13\20\1\233"+
    "\12\20\1\0\1\20\1\0\3\20\12\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\11\20\1\234"+
    "\14\20\1\0\1\20\1\0\3\20\12\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\11\20\1\235"+
    "\14\20\1\0\1\20\1\0\3\20\12\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\21\20\1\236"+
    "\4\20\1\0\1\20\1\0\3\20\12\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\1\20\1\237"+
    "\24\20\1\0\1\20\1\0\3\20\107\0\1\240\65\0"+
    "\1\241\143\0\1\242\14\0\2\243\1\201\1\0\1\201"+
    "\2\0\1\243\10\0\5\201\21\0\2\201\2\243\1\0"+
    "\1\201\1\0\1\243\2\0\1\243\4\0\1\243\2\0"+
    "\1\243\23\0\2\244\1\204\1\0\1\204\2\0\1\244"+
    "\10\0\5\204\21\0\2\204\2\244\1\0\1\204\1\0"+
    "\1\244\2\0\1\244\4\0\1\244\2\0\1\244\13\0"+
    "\6\115\1\245\1\246\104\115\10\0\1\207\1\0\1\207"+
    "\1\120\1\207\57\0\1\120\27\0\1\207\1\0\1\207"+
    "\1\0\1\207\107\0\3\211\1\247\1\211\2\0\1\211"+
    "\1\0\1\212\2\121\7\0\1\211\22\0\1\211\1\0"+
    "\2\211\3\0\1\211\2\0\1\211\3\0\1\247\1\211"+
    "\2\0\1\211\23\0\3\212\1\0\1\212\2\0\1\212"+
    "\2\0\2\121\7\0\1\212\22\0\1\212\1\0\2\212"+
    "\3\0\1\212\2\0\1\212\4\0\1\212\2\0\1\212"+
    "\23\0\3\250\1\0\1\250\2\0\1\250\13\0\1\250"+
    "\22\0\1\250\1\0\2\250\3\0\1\250\2\0\1\250"+
    "\4\0\1\250\2\0\1\250\23\0\3\251\1\0\1\251"+
    "\2\0\1\251\13\0\1\251\22\0\1\251\1\0\2\251"+
    "\3\0\1\251\2\0\1\251\4\0\1\251\2\0\1\251"+
    "\23\0\10\20\2\0\2\20\1\0\3\20\3\0\2\20"+
    "\21\0\14\20\1\252\11\20\1\0\1\20\1\0\3\20"+
    "\12\0\10\20\2\0\2\20\1\0\3\20\3\0\2\20"+
    "\21\0\13\20\1\253\12\20\1\0\1\20\1\0\3\20"+
    "\12\0\10\20\2\0\2\20\1\0\3\20\3\0\2\20"+
    "\21\0\3\20\1\254\22\20\1\0\1\20\1\0\3\20"+
    "\12\0\10\20\2\0\2\20\1\0\3\20\3\0\2\20"+
    "\21\0\6\20\1\255\17\20\1\0\1\20\1\0\3\20"+
    "\12\0\10\20\2\0\2\20\1\0\3\20\3\0\2\20"+
    "\21\0\2\20\1\256\23\20\1\0\1\20\1\0\3\20"+
    "\12\0\10\20\2\0\2\20\1\0\3\20\3\0\2\20"+
    "\21\0\2\20\1\257\23\20\1\0\1\20\1\0\3\20"+
    "\12\0\10\20\2\0\2\20\1\0\3\20\3\0\2\20"+
    "\21\0\7\20\1\260\16\20\1\0\1\20\1\0\3\20"+
    "\12\0\10\20\2\0\2\20\1\0\3\20\3\0\2\20"+
    "\21\0\2\20\1\261\23\20\1\0\1\20\1\0\3\20"+
    "\12\0\10\20\2\0\2\20\1\0\3\20\3\0\2\20"+
    "\21\0\5\20\1\262\6\20\1\263\11\20\1\0\1\20"+
    "\1\0\3\20\12\0\10\20\2\0\2\20\1\0\3\20"+
    "\3\0\2\20\21\0\2\20\1\264\23\20\1\0\1\20"+
    "\1\0\3\20\12\0\10\20\2\0\2\20\1\0\3\20"+
    "\3\0\2\20\21\0\3\20\1\265\22\20\1\0\1\20"+
    "\1\0\3\20\12\0\10\20\2\0\2\20\1\0\3\20"+
    "\3\0\2\20\21\0\2\20\1\266\23\20\1\0\1\20"+
    "\1\0\3\20\12\0\10\20\2\0\2\20\1\0\3\20"+
    "\3\0\2\20\21\0\2\20\1\267\23\20\1\0\1\20"+
    "\1\0\3\20\12\0\10\20\2\0\2\20\1\0\3\20"+
    "\3\0\2\20\21\0\5\20\1\270\20\20\1\0\1\20"+
    "\1\0\3\20\12\0\10\20\2\0\2\20\1\0\3\20"+
    "\3\0\2\20\21\0\13\20\1\271\12\20\1\0\1\20"+
    "\1\0\3\20\12\0\7\20\1\272\2\0\2\20\1\0"+
    "\3\20\3\0\2\20\21\0\26\20\1\0\1\20\1\0"+
    "\3\20\24\0\1\273\152\0\1\274\113\0\1\275\42\0"+
    "\3\276\1\0\1\276\2\0\1\276\13\0\1\276\22\0"+
    "\1\276\1\0\2\276\3\0\1\276\2\0\1\276\4\0"+
    "\1\276\2\0\1\276\23\0\3\277\1\0\1\277\2\0"+
    "\1\277\13\0\1\277\22\0\1\277\1\0\2\277\3\0"+
    "\1\277\2\0\1\277\4\0\1\277\2\0\1\277\23\0"+
    "\3\300\1\0\1\300\2\0\1\300\13\0\1\300\22\0"+
    "\1\300\1\0\2\300\3\0\1\300\2\0\1\300\4\0"+
    "\1\300\2\0\1\300\23\0\3\301\1\0\1\301\2\0"+
    "\1\301\13\0\1\301\22\0\1\301\1\0\2\301\3\0"+
    "\1\301\2\0\1\301\4\0\1\301\2\0\1\301\23\0"+
    "\10\20\2\0\2\20\1\0\3\20\3\0\2\20\21\0"+
    "\2\20\1\302\23\20\1\0\1\20\1\0\3\20\12\0"+
    "\10\20\2\0\2\20\1\0\3\20\3\0\2\20\21\0"+
    "\4\20\1\303\21\20\1\0\1\20\1\0\3\20\12\0"+
    "\10\20\2\0\2\20\1\0\3\20\3\0\2\20\21\0"+
    "\1\20\1\304\24\20\1\0\1\20\1\0\3\20\12\0"+
    "\10\20\2\0\2\20\1\0\3\20\3\0\1\305\1\20"+
    "\21\0\26\20\1\0\1\20\1\0\3\20\12\0\10\20"+
    "\2\0\2\20\1\0\3\20\3\0\2\20\21\0\16\20"+
    "\1\306\7\20\1\0\1\20\1\0\3\20\12\0\10\20"+
    "\2\0\2\20\1\0\3\20\3\0\2\20\21\0\11\20"+
    "\1\307\14\20\1\0\1\20\1\0\3\20\12\0\10\20"+
    "\2\0\2\20\1\0\3\20\3\0\2\20\21\0\5\20"+
    "\1\310\20\20\1\0\1\20\1\0\3\20\12\0\10\20"+
    "\2\0\2\20\1\0\3\20\3\0\2\20\21\0\1\20"+
    "\1\311\24\20\1\0\1\20\1\0\3\20\12\0\10\20"+
    "\2\0\2\20\1\0\3\20\3\0\2\20\21\0\6\20"+
    "\1\312\17\20\1\0\1\20\1\0\3\20\12\0\10\20"+
    "\2\0\2\20\1\0\3\20\3\0\2\20\21\0\7\20"+
    "\1\313\16\20\1\0\1\20\1\0\3\20\12\0\10\20"+
    "\2\0\2\20\1\0\3\20\3\0\2\20\21\0\7\20"+
    "\1\314\16\20\1\0\1\20\1\0\3\20\12\0\10\20"+
    "\2\0\2\20\1\0\3\20\3\0\2\20\21\0\7\20"+
    "\1\315\16\20\1\0\1\20\1\0\3\20\12\0\10\20"+
    "\2\0\2\20\1\0\3\20\3\0\2\20\21\0\2\20"+
    "\1\316\23\20\1\0\1\20\1\0\3\20\12\0\10\20"+
    "\2\0\2\20\1\0\3\20\3\0\2\20\21\0\22\20"+
    "\1\317\3\20\1\0\1\20\1\0\3\20\62\0\1\320"+
    "\143\0\1\321\20\0\1\322\106\0\3\323\1\0\1\323"+
    "\2\0\1\323\13\0\1\323\22\0\1\323\1\0\2\323"+
    "\3\0\1\323\2\0\1\323\4\0\1\323\2\0\1\323"+
    "\23\0\3\324\1\0\1\324\2\0\1\324\13\0\1\324"+
    "\22\0\1\324\1\0\2\324\3\0\1\324\2\0\1\324"+
    "\4\0\1\324\2\0\1\324\23\0\3\133\1\0\1\133"+
    "\2\0\1\133\13\0\1\133\22\0\1\133\1\0\2\133"+
    "\3\0\1\133\2\0\1\133\4\0\1\133\2\0\1\133"+
    "\23\0\3\136\1\0\1\136\2\0\1\136\13\0\1\136"+
    "\22\0\1\136\1\0\2\136\3\0\1\136\2\0\1\136"+
    "\4\0\1\136\2\0\1\136\23\0\10\20\2\0\2\20"+
    "\1\0\3\20\3\0\1\20\1\325\21\0\26\20\1\0"+
    "\1\20\1\0\3\20\12\0\10\20\2\0\2\20\1\0"+
    "\3\20\3\0\2\20\21\0\10\20\1\326\15\20\1\0"+
    "\1\20\1\0\3\20\12\0\10\20\2\0\2\20\1\0"+
    "\3\20\3\0\1\20\1\327\21\0\26\20\1\0\1\20"+
    "\1\0\3\20\12\0\10\20\2\0\2\20\1\0\3\20"+
    "\3\0\1\330\1\20\21\0\26\20\1\0\1\20\1\0"+
    "\3\20\12\0\10\20\2\0\2\20\1\0\3\20\3\0"+
    "\2\20\21\0\13\20\1\331\12\20\1\0\1\20\1\0"+
    "\3\20\12\0\10\20\2\0\2\20\1\0\3\20\3\0"+
    "\2\20\21\0\5\20\1\332\20\20\1\0\1\20\1\0"+
    "\3\20\12\0\10\20\2\0\2\20\1\0\3\20\3\0"+
    "\2\20\21\0\5\20\1\333\20\20\1\0\1\20\1\0"+
    "\3\20\12\0\10\20\2\0\2\20\1\0\3\20\3\0"+
    "\2\20\21\0\16\20\1\334\7\20\1\0\1\20\1\0"+
    "\3\20\12\0\10\20\2\0\2\20\1\0\3\20\3\0"+
    "\2\20\21\0\23\20\1\335\2\20\1\0\1\20\1\0"+
    "\3\20\113\0\1\336\12\0\3\201\1\0\1\201\2\0"+
    "\1\201\13\0\1\201\22\0\1\201\1\0\2\201\3\0"+
    "\1\201\2\0\1\201\4\0\1\201\2\0\1\201\23\0"+
    "\3\204\1\0\1\204\2\0\1\204\13\0\1\204\22\0"+
    "\1\204\1\0\2\204\3\0\1\204\2\0\1\204\4\0"+
    "\1\204\2\0\1\204\23\0\10\20\2\0\2\20\1\0"+
    "\3\20\3\0\2\20\21\0\1\20\1\337\24\20\1\0"+
    "\1\20\1\0\3\20\12\0\10\20\2\0\2\20\1\0"+
    "\3\20\3\0\2\20\21\0\6\20\1\340\17\20\1\0"+
    "\1\20\1\0\3\20\12\0\10\20\2\0\2\20\1\0"+
    "\3\20\3\0\2\20\21\0\3\20\1\341\22\20\1\0"+
    "\1\20\1\0\3\20\12\0\10\20\2\0\2\20\1\0"+
    "\3\20\3\0\2\20\21\0\5\20\1\342\20\20\1\0"+
    "\1\20\1\0\3\20\12\0\10\20\2\0\2\20\1\0"+
    "\3\20\3\0\2\20\21\0\11\20\1\343\14\20\1\0"+
    "\1\20\1\0\3\20\12\0\10\20\2\0\2\20\1\0"+
    "\3\20\3\0\2\20\21\0\20\20\1\344\5\20\1\0"+
    "\1\20\1\0\3\20\62\0\1\345\43\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\2\20\1\346"+
    "\23\20\1\0\1\20\1\0\3\20\12\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\7\20\1\347"+
    "\16\20\1\0\1\20\1\0\3\20\12\0\10\20\2\0"+
    "\2\20\1\0\3\20\3\0\2\20\21\0\25\20\1\350"+
    "\1\0\1\20\1\0\3\20\12\0\10\20\2\0\2\20"+
    "\1\0\3\20\3\0\2\20\21\0\24\20\1\351\1\20"+
    "\1\0\1\20\1\0\3\20\36\0\1\352\67\0\10\20"+
    "\2\0\2\20\1\0\3\20\3\0\2\20\21\0\2\20"+
    "\1\353\23\20\1\0\1\20\1\0\3\20\12\0\10\20"+
    "\2\0\2\20\1\0\3\20\3\0\2\20\21\0\2\20"+
    "\1\354\23\20\1\0\1\20\1\0\3\20\12\0\7\20"+
    "\1\354\2\0\2\20\1\0\3\20\3\0\2\20\21\0"+
    "\26\20\1\0\1\20\1\0\3\20\65\0\1\355\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12540];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\4\1\1\11\16\1\11\11\25\1\2\11"+
    "\4\1\3\11\1\1\1\11\6\1\2\11\1\1\1\11"+
    "\2\1\3\11\1\0\1\1\1\0\1\1\1\0\5\11"+
    "\1\0\1\11\3\0\3\1\14\11\17\1\4\0\1\11"+
    "\3\0\2\1\1\0\1\1\3\0\23\1\5\0\1\11"+
    "\1\0\1\11\2\0\21\1\7\0\16\1\1\11\1\0"+
    "\1\11\2\0\11\1\1\0\6\1\1\0\4\1\1\0"+
    "\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[237];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public _BeetlLexer() {
		this((java.io.Reader)null);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _BeetlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BeetlTokenTypes.TEMPORARY;
            } 
            // fall through
          case 84: break;
          case 2: 
            { return BeetlTokenTypes.HTML_NEW_LINE;
            } 
            // fall through
          case 85: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 86: break;
          case 4: 
            { return BeetlTokenTypes.NEW_LINE;
            } 
            // fall through
          case 87: break;
          case 5: 
            { return BeetlTokenTypes.WHITE_SPACE;
            } 
            // fall through
          case 88: break;
          case 6: 
            { return BeetlTokenTypes.BT_QUOTIENT;
            } 
            // fall through
          case 89: break;
          case 7: 
            { return BeetlTokenTypes.BT_MUL;
            } 
            // fall through
          case 90: break;
          case 8: 
            { return BeetlTokenTypes.BT_INT;
            } 
            // fall through
          case 91: break;
          case 9: 
            { return BeetlTokenTypes.BT_IDENTIFIER;
            } 
            // fall through
          case 92: break;
          case 10: 
            { return BeetlTokenTypes.BT_MINUS;
            } 
            // fall through
          case 93: break;
          case 11: 
            { return BeetlTokenTypes.BT_DOT;
            } 
            // fall through
          case 94: break;
          case 12: 
            { return BeetlTokenTypes.BT_PLUS;
            } 
            // fall through
          case 95: break;
          case 13: 
            { return BeetlTokenTypes.BT_LBRACE;
            } 
            // fall through
          case 96: break;
          case 14: 
            { return BeetlTokenTypes.BT_RBRACE;
            } 
            // fall through
          case 97: break;
          case 15: 
            { return BeetlTokenTypes.BT_LBRACK;
            } 
            // fall through
          case 98: break;
          case 16: 
            { return BeetlTokenTypes.BT_RBRACK;
            } 
            // fall through
          case 99: break;
          case 17: 
            { return BeetlTokenTypes.BT_LPAREN;
            } 
            // fall through
          case 100: break;
          case 18: 
            { return BeetlTokenTypes.BT_RPAREN;
            } 
            // fall through
          case 101: break;
          case 19: 
            { return BeetlTokenTypes.BT_COLON;
            } 
            // fall through
          case 102: break;
          case 20: 
            { return BeetlTokenTypes.BT_SEMICOLON;
            } 
            // fall through
          case 103: break;
          case 21: 
            { return BeetlTokenTypes.BT_COMMA;
            } 
            // fall through
          case 104: break;
          case 22: 
            { return BeetlTokenTypes.BT_ASSIGN;
            } 
            // fall through
          case 105: break;
          case 23: 
            { return BeetlTokenTypes.BT_NOT;
            } 
            // fall through
          case 106: break;
          case 24: 
            { return BeetlTokenTypes.BT_BIT_OR;
            } 
            // fall through
          case 107: break;
          case 25: 
            { return BeetlTokenTypes.BT_BIT_AND;
            } 
            // fall through
          case 108: break;
          case 26: 
            { return BeetlTokenTypes.BT_LESS;
            } 
            // fall through
          case 109: break;
          case 27: 
            { return BeetlTokenTypes.BT_BIT_XOR;
            } 
            // fall through
          case 110: break;
          case 28: 
            { return BeetlTokenTypes.BT_REMAINDER;
            } 
            // fall through
          case 111: break;
          case 29: 
            { return BeetlTokenTypes.BT_GREATER;
            } 
            // fall through
          case 112: break;
          case 30: 
            { return BeetlTokenTypes.BT_AT;
            } 
            // fall through
          case 113: break;
          case 31: 
            { return BeetlTokenTypes.BT_QUESTOIN;
            } 
            // fall through
          case 114: break;
          case 32: 
            { return BeetlTokenTypes.BT_ATTRIBUTE_NAME;
            } 
            // fall through
          case 115: break;
          case 33: 
            { return BeetlTokenTypes.LINE_COMMENT;
            } 
            // fall through
          case 116: break;
          case 34: 
            { return BeetlTokenTypes.MULTILINE_COMMENT;
            } 
            // fall through
          case 117: break;
          case 35: 
            { return BeetlTokenTypes.BT_QUOTIENT_ASSIGN;
            } 
            // fall through
          case 118: break;
          case 36: 
            { return BeetlTokenTypes.BT_MUL_ASSIGN;
            } 
            // fall through
          case 119: break;
          case 37: 
            { return BeetlTokenTypes.BT_FLOAT;
            } 
            // fall through
          case 120: break;
          case 38: 
            { return BeetlTokenTypes.BT_OCT;
            } 
            // fall through
          case 121: break;
          case 39: 
            { return BeetlTokenTypes.BT_DECREASE;
            } 
            // fall through
          case 122: break;
          case 40: 
            { return BeetlTokenTypes.BT_MINUS_ASSIGN;
            } 
            // fall through
          case 123: break;
          case 41: 
            { return BeetlTokenTypes.BT_VIRTUAL;
            } 
            // fall through
          case 124: break;
          case 42: 
            { return BeetlTokenTypes.BT_INCREASE;
            } 
            // fall through
          case 125: break;
          case 43: 
            { return BeetlTokenTypes.BT_PLUS_ASSIGN;
            } 
            // fall through
          case 126: break;
          case 44: 
            { return BeetlTokenTypes.BT_STRING;
            } 
            // fall through
          case 127: break;
          case 45: 
            { return BeetlTokenTypes.BT_EQ;
            } 
            // fall through
          case 128: break;
          case 46: 
            { return BeetlTokenTypes.BT_NOT_EQ;
            } 
            // fall through
          case 129: break;
          case 47: 
            { return BeetlTokenTypes.BT_BIT_OR_ASSIGN;
            } 
            // fall through
          case 130: break;
          case 48: 
            { return BeetlTokenTypes.BT_COND_OR;
            } 
            // fall through
          case 131: break;
          case 49: 
            { return BeetlTokenTypes.BT_BIT_AND_ASSIGN;
            } 
            // fall through
          case 132: break;
          case 50: 
            { return BeetlTokenTypes.BT_COND_AND;
            } 
            // fall through
          case 133: break;
          case 51: 
            { return BeetlTokenTypes.BT_LESS_OR_EQUAL;
            } 
            // fall through
          case 134: break;
          case 52: 
            { return BeetlTokenTypes.BT_SHIFT_LEFT;
            } 
            // fall through
          case 135: break;
          case 53: 
            { return BeetlTokenTypes.BT_BIT_XOR_ASSIGN;
            } 
            // fall through
          case 136: break;
          case 54: 
            { return BeetlTokenTypes.BT_REMAINDER_ASSIGN;
            } 
            // fall through
          case 137: break;
          case 55: 
            { return BeetlTokenTypes.BT_GREATER_OR_EQUAL;
            } 
            // fall through
          case 138: break;
          case 56: 
            { return BeetlTokenTypes.BT_SHIFT_RIGHT;
            } 
            // fall through
          case 139: break;
          case 57: 
            { return BeetlTokenTypes.BT_IF;
            } 
            // fall through
          case 140: break;
          case 58: 
            { return BeetlTokenTypes.BT_FOR_IN;
            } 
            // fall through
          case 141: break;
          case 59: 
            { return BeetlTokenTypes.BT_ATTRIBUTE_VALUE;
            } 
            // fall through
          case 142: break;
          case 60: 
            { return BeetlTokenTypes.BT_HEX;
            } 
            // fall through
          case 143: break;
          case 61: 
            { return BeetlTokenTypes.BT_FOR;
            } 
            // fall through
          case 144: break;
          case 62: 
            { return BeetlTokenTypes.BT_TRY;
            } 
            // fall through
          case 145: break;
          case 63: 
            { return BeetlTokenTypes.BT_VAR;
            } 
            // fall through
          case 146: break;
          case 64: 
            { return BeetlTokenTypes.BT_NULL;
            } 
            // fall through
          case 147: break;
          case 65: 
            { return BeetlTokenTypes.BT_ELSE;
            } 
            // fall through
          case 148: break;
          case 66: 
            { return BeetlTokenTypes.BT_TRUE;
            } 
            // fall through
          case 149: break;
          case 67: 
            { return BeetlTokenTypes.BT_CASE;
            } 
            // fall through
          case 150: break;
          case 68: 
            { return BeetlTokenTypes.BT_FALSE;
            } 
            // fall through
          case 151: break;
          case 69: 
            { return BeetlTokenTypes.BT_BREAK;
            } 
            // fall through
          case 152: break;
          case 70: 
            { return BeetlTokenTypes.BT_CATCH;
            } 
            // fall through
          case 153: break;
          case 71: 
            { return BeetlTokenTypes.BT_CONST;
            } 
            // fall through
          case 154: break;
          case 72: 
            { return BeetlTokenTypes.BT_WHILE;
            } 
            // fall through
          case 155: break;
          case 73: 
            { return BeetlTokenTypes.BT_TYPE_;
            } 
            // fall through
          case 156: break;
          case 74: 
            { return BeetlTokenTypes.BT_AJAX;
            } 
            // fall through
          case 157: break;
          case 75: 
            { return BeetlTokenTypes.BT_RETURN ;
            } 
            // fall through
          case 158: break;
          case 76: 
            { return BeetlTokenTypes.BT_SELECT;
            } 
            // fall through
          case 159: break;
          case 77: 
            { return BeetlTokenTypes.BT_SWITCH;
            } 
            // fall through
          case 160: break;
          case 78: 
            { return BeetlTokenTypes.BT_ELSE_FOR;
            } 
            // fall through
          case 161: break;
          case 79: 
            { return BeetlTokenTypes.BT_DEFAULT;
            } 
            // fall through
          case 162: break;
          case 80: 
            { return BeetlTokenTypes.BT_CONTINUE ;
            } 
            // fall through
          case 163: break;
          case 81: 
            { return BeetlTokenTypes.BT_INTERFACE;
            } 
            // fall through
          case 164: break;
          case 82: 
            { return BeetlTokenTypes.BT_DIRECTIVE;
            } 
            // fall through
          case 165: break;
          case 83: 
            { return BeetlTokenTypes.BT_FRAGMENT;
            } 
            // fall through
          case 166: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

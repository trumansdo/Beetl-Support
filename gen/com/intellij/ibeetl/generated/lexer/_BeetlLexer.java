/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.intellij.ibeetl.generated.lexer;

import com.intellij.ibeetl.lang.BeetlParserDefinition;
import com.intellij.ibeetl.lang.lexer.BeetlTokenTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.apache.commons.lang3.StringUtils;

import static com.intellij.ibeetl.lang.lexer.BeetlIElementTypes.BTL_TEMPLATE_HTML_TEXT;
import static com.intellij.psi.TokenType.BAD_CHARACTER;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>beetl.flex</tt>
 */
public class _BeetlLexer implements FlexLexer {

	/**
	 * This character denotes the end of file
	 */
	public static final int YYEOF = -1;

	/**
	 * initial size of the lookahead buffer
	 */
	private static final int ZZ_BUFFERSIZE = 16384;
	private static final String ZZ_NL = System.getProperty("line.separator");

	/**
	 * lexical states
	 */
	public static final int YYINITIAL = 0;
	public static final int BTL_LEX = 2;
	public static final int BTL_HTML_LEX = 4;
	public static final int BTL_PLACEHOLDER = 6;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = {
			0, 0, 1, 1, 2, 2, 3, 3
	};

	/**
	 * Translates characters to character classes
	 * Chosen bits are [13, 6, 2]
	 * Total runtime size is 23632 bytes
	 */
	public static int ZZ_CMAP(int ch) {
		return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 8] << 6) | ((ch >> 2) & 0x3f)] << 2) | (ch & 0x3)];
	}

	/* The ZZ_CMAP_Z table has 4352 entries */
	static final char ZZ_CMAP_Z[] = zzUnpackCMap(
			"\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1" +
					"\20\1\1\1\21\1\22\1\23\1\1\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\1\1\34" +
					"\1\35\1\36\2\37\1\40\7\37\1\41\1\42\1\43\1\37\1\44\1\45\2\37\31\1\1\46\121" +
					"\1\1\47\4\1\1\50\1\1\1\51\1\52\1\53\1\54\1\55\1\56\53\1\1\57\41\37\1\1\1\60" +
					"\1\61\1\1\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76" +
					"\1\77\1\100\1\101\3\37\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112" +
					"\1\37\1\113\1\37\1\114\3\37\3\1\1\115\1\116\1\117\12\37\4\1\1\120\17\37\2" +
					"\73\1\121\41\37\2\1\1\122\1\123\3\37\1\124\27\73\1\125\2\73\1\126\45\37\1" +
					"\127\13\37\1\130\24\37\1\131\1\132\1\37\1\133\1\134\1\135\1\136\2\37\1\137" +
					"\5\37\1\140\7\37\1\141\1\142\4\37\1\143\2\37\1\144\16\37\246\1\1\145\20\1" +
					"\1\146\1\147\25\73\1\150\51\37\2\1\1\151\u0b05\37\1\152\1\153\u02fe\37");

	/* The ZZ_CMAP_Y table has 6912 entries */
	static final char ZZ_CMAP_Y[] = zzUnpackCMap(
			"\2\0\1\1\1\2\3\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1" +
					"\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\0\1\34\6" +
					"\0\1\35\1\36\1\37\1\40\1\3\1\41\1\37\1\3\5\17\1\42\7\17\1\42\162\17\1\43\1" +
					"\44\2\17\1\43\3\3\1\17\1\45\1\3\1\46\4\3\34\47\1\17\1\50\1\44\1\51\1\3\1\37" +
					"\1\42\1\50\4\17\1\52\24\17\1\52\42\17\1\53\1\47\1\54\47\17\2\55\1\56\10\17" +
					"\1\42\1\41\1\3\1\56\11\17\1\3\1\57\1\60\12\47\1\61\1\62\1\61\2\3\6\17\1\42" +
					"\1\3\1\42\3\3\1\0\1\63\1\57\1\3\2\47\1\64\1\3\12\17\1\65\7\47\1\66\1\44\1" +
					"\67\30\17\1\70\1\47\1\71\1\47\1\72\1\73\1\74\2\47\1\74\1\75\3\3\1\76\1\77" +
					"\7\17\6\47\1\64\1\56\25\17\1\100\2\47\1\101\3\3\2\47\1\74\7\17\1\65\2\47\1" +
					"\43\1\37\1\3\5\17\1\100\1\102\2\47\2\103\1\66\4\3\6\17\1\103\21\3\1\104\2" +
					"\17\1\105\1\55\1\106\1\55\1\107\5\3\3\55\1\110\6\47\1\111\1\47\15\17\1\100" +
					"\1\112\4\47\1\103\1\47\2\17\1\100\1\113\2\47\1\56\1\17\1\114\1\17\1\115\1" +
					"\56\1\17\2\75\5\17\1\50\1\17\1\46\1\44\1\43\1\112\1\47\2\116\1\117\1\3\1\120" +
					"\1\3\1\52\1\100\1\113\2\47\1\121\1\3\1\57\1\3\1\60\1\56\1\42\1\122\1\75\5" +
					"\17\1\50\1\17\1\50\1\123\1\43\1\73\1\64\1\120\1\116\1\66\1\124\1\3\1\56\1" +
					"\46\1\3\1\113\2\47\1\74\1\125\2\3\1\60\1\56\1\17\2\52\5\17\1\50\1\17\1\50" +
					"\1\56\1\43\1\112\1\47\2\61\1\66\1\45\3\3\1\100\1\113\2\47\1\126\1\3\1\127" +
					"\1\3\1\60\1\56\1\17\2\75\5\17\1\50\1\17\1\50\1\56\1\43\1\112\1\47\2\116\1" +
					"\66\1\3\1\113\1\3\1\52\1\100\1\113\2\47\1\41\3\3\1\130\1\56\1\42\1\44\1\50" +
					"\1\43\1\123\1\50\1\122\1\45\1\42\1\44\2\17\1\43\1\113\1\64\1\113\1\73\1\66" +
					"\1\45\1\120\3\3\1\113\2\47\2\3\1\126\1\3\1\115\1\56\1\17\2\50\5\17\1\50\2" +
					"\17\1\114\1\43\1\70\1\47\2\73\1\66\1\3\1\62\1\131\1\3\1\100\1\113\2\47\4\3" +
					"\1\132\1\56\1\17\2\50\5\17\1\50\2\17\1\56\1\43\1\112\1\47\2\73\1\66\1\3\1" +
					"\62\1\3\1\37\1\100\1\113\2\47\1\123\3\3\1\133\1\56\1\17\2\50\11\17\1\42\1" +
					"\70\1\47\2\73\1\117\1\3\1\134\1\3\1\135\1\100\1\113\2\47\2\3\1\44\1\17\1\113" +
					"\1\56\3\17\1\42\1\44\5\17\1\52\2\17\1\41\1\17\1\42\1\136\1\120\1\47\1\137" +
					"\2\47\1\3\1\140\2\55\1\113\3\3\1\56\13\17\1\77\1\47\1\64\1\57\1\17\1\65\1" +
					"\47\1\64\2\47\1\66\11\3\1\123\1\75\1\46\1\41\1\3\1\17\1\56\1\17\1\56\1\141" +
					"\1\44\1\56\1\77\1\47\1\61\1\101\1\17\1\46\1\47\1\66\2\47\1\66\1\17\10\3\1" +
					"\45\5\3\1\66\1\3\2\47\1\66\2\3\1\142\1\124\1\113\2\17\1\56\10\17\1\45\1\60" +
					"\4\47\1\73\1\17\1\103\2\47\1\60\10\47\1\143\1\3\1\136\16\3\12\17\1\65\4\47" +
					"\1\144\2\47\1\66\1\3\1\17\1\100\1\74\1\100\1\112\1\72\1\47\1\74\1\103\1\67" +
					"\2\17\1\100\2\47\1\102\3\47\1\66\11\17\1\52\1\3\1\41\12\17\1\42\23\17\1\50" +
					"\1\43\1\17\1\42\1\50\1\43\12\17\1\50\1\43\10\17\1\50\1\43\1\17\1\42\1\50\1" +
					"\43\3\17\1\42\16\17\1\50\1\43\20\17\1\42\1\60\10\3\4\17\4\3\25\17\1\145\1" +
					"\55\1\107\1\56\132\17\1\75\4\17\1\146\5\17\1\42\1\3\22\17\1\42\1\44\1\105" +
					"\1\55\1\147\1\3\3\17\1\50\1\100\1\143\2\3\4\17\1\100\1\143\2\3\4\17\1\100" +
					"\3\3\3\17\1\50\1\150\3\3\15\17\10\47\1\122\1\57\1\125\2\47\1\66\7\3\1\120" +
					"\1\66\2\47\1\66\1\3\26\17\2\3\12\17\1\151\1\3\21\17\1\43\2\3\7\17\1\152\3" +
					"\47\1\3\3\47\2\3\1\113\2\47\7\17\1\43\1\17\1\45\2\3\13\17\1\3\4\47\1\67\1" +
					"\17\1\66\1\3\2\47\1\66\11\3\5\17\1\65\1\47\1\3\15\17\1\103\1\47\1\64\7\47" +
					"\1\116\2\47\1\66\1\3\2\47\1\66\2\3\1\122\2\3\3\55\1\153\20\3\1\47\1\67\13" +
					"\17\4\47\1\67\1\17\1\3\2\47\1\66\3\3\1\120\2\47\3\3\1\144\7\17\1\103\2\47" +
					"\1\74\2\47\1\74\12\17\1\100\3\47\3\3\11\17\5\47\2\3\2\47\1\66\1\56\2\47\1" +
					"\74\10\17\1\43\2\55\1\147\21\3\1\64\5\47\1\67\1\77\1\100\1\154\1\107\1\3\60" +
					"\17\11\47\1\111\3\55\1\107\1\135\1\47\5\17\1\43\1\17\1\43\11\17\1\43\1\17" +
					"\1\43\2\17\2\141\7\17\1\43\15\17\1\50\1\17\1\46\1\44\1\50\1\17\1\45\1\17\1" +
					"\44\1\17\1\3\3\17\1\45\1\44\1\50\1\17\1\45\2\155\1\156\1\0\6\3\1\157\1\160" +
					"\3\3\1\122\1\45\4\3\1\45\1\3\1\161\1\0\1\63\1\162\1\0\1\41\2\3\1\122\4\3\3" +
					"\17\1\45\6\163\1\164\5\3\3\47\1\165\1\166\1\115\2\47\1\143\3\3\1\37\1\122" +
					"\1\44\2\17\1\41\1\56\1\43\1\3\1\46\1\50\1\52\2\17\1\43\1\17\1\3\1\56\1\43" +
					"\1\37\4\3\12\17\1\45\212\3\1\140\14\55\1\107\5\3\13\17\1\42\13\17\1\42\41" +
					"\17\1\45\1\122\1\65\1\74\3\3\11\17\1\52\1\3\1\41\16\17\1\3\1\122\3\3\1\120" +
					"\5\17\1\42\2\3\1\17\1\42\1\17\1\42\1\17\1\42\1\17\1\42\1\17\1\42\1\17\1\42" +
					"\1\17\1\42\1\17\1\42\10\47\13\3\1\122\64\3\1\167\1\56\6\3\1\56\1\17\1\100" +
					"\1\47\1\56\1\43\1\17\1\45\1\56\24\17\1\42\1\62\2\56\25\17\1\42\1\17\1\3\1" +
					"\56\11\17\1\43\1\56\26\17\1\42\4\3\6\17\1\42\15\3\61\17\1\43\22\3\63\17\1" +
					"\105\1\55\1\107\12\3\43\17\1\45\20\3\13\17\1\43\3\17\1\45\4\17\2\47\1\74\5" +
					"\3\13\17\1\65\1\153\2\47\1\170\6\17\1\55\1\134\24\17\1\66\10\3\1\122\2\17" +
					"\1\44\31\17\1\75\1\171\1\17\3\55\2\17\1\171\1\153\2\55\17\3\1\135\2\17\2\172" +
					"\1\65\5\17\1\65\1\47\4\3\1\173\1\3\15\17\3\3\1\74\14\17\4\47\1\174\2\3\2\47" +
					"\1\66\1\3\4\47\1\74\1\17\1\122\1\127\2\47\1\74\6\17\1\100\1\47\1\66\5\17\1" +
					"\65\3\47\3\3\7\17\1\45\1\47\13\17\1\65\3\47\1\143\2\3\1\122\2\47\1\66\1\3" +
					"\7\55\1\153\12\17\1\103\2\47\1\64\2\3\1\65\2\17\1\66\2\47\1\66\1\3\5\17\1" +
					"\42\1\175\1\55\14\17\1\112\1\72\1\67\1\100\1\151\5\3\1\122\1\43\2\17\1\65" +
					"\1\47\1\44\1\176\2\3\1\56\1\42\1\56\1\42\1\56\1\42\2\3\1\17\1\42\1\17\1\42" +
					"\12\55\1\153\2\55\1\107\2\3\24\55\10\17\1\65\1\47\1\64\1\66\2\47\1\66\1\3" +
					"\51\17\3\3\5\17\1\42\1\122\14\17\1\3\33\17\1\43\32\17\1\43\11\3\1\17\1\42" +
					"\2\3\1\122\1\17\1\3\1\177\2\17\1\50\2\17\1\42\1\17\1\46\1\52\1\50\32\17\1" +
					"\43\7\3\1\122\32\17\1\43\4\3\20\17\1\44\15\17\12\3\3\17\1\173\4\47\4\3\1\47" +
					"\1\111\2\55\1\122\1\45\5\3\1\56\6\3\1\126\1\3\1\17\1\50\41\17\1\200\1\3\1" +
					"\173\2\3\2\47\1\66\1\3\1\56\5\17\1\42\1\122\1\56\5\17\1\42\2\3\1\44\25\17" +
					"\1\42\1\44\1\17\1\44\1\17\1\44\1\17\1\44\1\45\1\36\1\201\4\3\1\202\1\3\3\17" +
					"\1\56\5\17\1\42\4\17\1\42\1\52\3\17\1\43\3\17\1\43\10\3\36\17\1\42\21\3\15" +
					"\17\1\45\41\3\1\124\40\3\7\17\1\45\14\17\1\45\3\3\1\147\7\3\7\17\1\171\4\3" +
					"\6\17\1\42\1\3\12\55\1\153\1\3\7\17\1\43\11\17\1\3\2\17\1\56\1\43\12\3\47" +
					"\17\1\43\2\47\1\66\1\3\11\55\1\3\11\55\1\3\12\55\2\3\15\55\47\3\115\55\1\153" +
					"\2\3\5\55\1\107\2\3\2\55\46\3\1\17\1\43\1\50\12\17\1\52\1\45\1\75\5\17\1\43" +
					"\2\3\5\55\1\153\2\3\7\55\1\153\20\3\4\55\1\153\1\107\2\3\5\17\1\43\2\3\6\17" +
					"\1\43\21\3\16\17\1\3\1\44\20\3\1\103\1\62\1\3\1\47\1\17\2\56\6\17\1\3\1\64" +
					"\1\120\10\3\7\17\1\45\7\55\1\147\10\3\2\55\1\203\6\55\1\153\6\3\15\17\1\43" +
					"\2\3\5\17\1\43\2\3\4\17\1\42\3\3\4\55\1\107\33\3\22\17\1\45\15\3\14\55\1\153" +
					"\3\3\14\55\1\153\3\3\1\144\15\17\3\47\1\64\7\3\1\113\2\47\3\3\1\135\1\144" +
					"\13\17\2\47\1\64\1\40\4\3\6\17\1\45\1\3\2\47\1\66\1\3\1\144\10\17\1\65\3\47" +
					"\1\73\2\47\4\3\11\55\1\204\2\3\1\144\13\17\1\65\3\47\1\67\1\45\1\140\1\147" +
					"\2\47\1\205\1\147\10\3\4\55\1\110\11\55\1\3\1\204\20\3\1\55\1\153\1\106\1" +
					"\110\3\55\1\110\2\55\1\147\1\3\16\55\1\153\1\3\2\55\1\107\1\3\1\55\1\203\1" +
					"\55\2\206\5\55\1\106\1\55\1\106\1\203\1\107\2\55\2\206\1\107\1\147\1\135\1" +
					"\3\1\203\1\55\1\140\1\55\1\147\1\55\1\147\42\3\22\55\1\153\1\3\2\55\1\107" +
					"\11\3\21\55\1\110\2\3\2\55\1\107\51\3\15\55\1\107\2\55\1\147\5\3\1\55\1\107" +
					"\10\3\20\55\2\147\2\3\2\55\1\107\11\3\12\17\1\65\3\47\2\3\2\47\1\66\15\3\6" +
					"\55\1\107\1\203\3\55\1\3\2\55\1\107\131\3\22\55\1\107\4\3\1\135\60\3\16\55" +
					"\1\147\1\3\2\55\1\106\12\55\1\153\2\55\1\147\3\3\2\55\1\107\5\3\1\140\7\55" +
					"\1\140\5\55\1\203\2\55\1\153\22\3\33\17\1\171\12\55\1\107\31\3\30\17\1\171" +
					"\2\55\1\153\4\3\61\55\57\3\13\17\1\42\64\3\21\55\1\153\56\3\16\17\1\45\1\3" +
					"\7\55\1\153\2\55\1\107\31\3\7\55\1\107\1\55\1\147\2\3\15\55\1\153\2\3\1\55" +
					"\3\3\2\55\1\107\1\3\1\135\5\55\1\3\1\203\4\55\34\3\21\17\1\45\2\3\1\103\12" +
					"\47\1\64\3\3\1\120\1\144\3\17\20\3\1\147\7\3\73\55\1\147\4\3\74\55\1\153\3" +
					"\3\1\43\77\3\32\55\1\153\1\3\3\55\1\147\2\55\1\147\1\3\2\55\1\107\1\207\61" +
					"\3\1\60\1\66\1\60\1\210\1\0\1\211\1\47\1\64\1\60\1\47\7\3\1\113\1\66\44\3" +
					"\1\113\1\143\56\3\25\17\1\50\21\17\1\50\1\37\1\123\1\56\1\50\2\17\1\52\1\56" +
					"\1\17\1\56\17\17\1\52\1\42\1\56\1\17\1\50\1\17\1\50\6\17\1\52\1\42\1\17\1" +
					"\46\1\44\1\17\1\50\124\17\1\43\6\17\1\50\5\17\1\42\7\17\1\42\6\17\1\50\7\17" +
					"\1\50\5\17\1\42\7\17\1\42\6\17\1\50\7\17\1\50\5\17\1\42\2\17\1\113\14\47\15" +
					"\55\1\153\1\135\14\55\1\147\1\3\1\127\3\3\1\147\4\3\1\135\1\55\1\203\3\55" +
					"\24\3\1\55\1\153\4\55\1\206\1\55\1\110\1\106\1\153\65\3\61\55\1\147\2\3\1" +
					"\55\1\153\12\3\22\55\1\153\1\3\2\55\1\107\51\3\1\17\1\56\6\17\1\123\1\75\1" +
					"\56\1\17\1\42\1\17\1\141\1\3\1\37\1\122\1\141\1\56\1\123\1\75\2\141\1\123" +
					"\1\75\1\42\1\17\1\42\1\17\1\56\1\46\2\17\1\52\4\17\1\3\2\56\1\52\4\17\35\3" +
					"\6\55\1\107\1\3\6\55\1\107\1\3\6\55\1\107\35\3\65\17\1\42\12\3\15\17\1\45" +
					"\2\3\67\17\1\43\140\55\1\107\27\3\7\17\1\43\70\3\1\40\7\3\30\0\40\3\74\47" +
					"\4\3");

	/* The ZZ_CMAP_A table has 552 entries */
	static final char ZZ_CMAP_A[] = zzUnpackCMap(
			"\5\26\1\5\1\2\2\3\1\1\2\26\4\0\1\5\1\55\1\33\1\44\1\40\1\43\1\57\1\35\1\47" +
					"\1\50\1\7\1\25\1\53\1\21\1\22\1\6\1\15\7\13\2\11\1\51\1\52\1\42\1\54\1\61" +
					"\1\116\1\110\2\12\1\104\1\101\1\20\1\12\1\31\1\14\1\102\6\31\1\24\1\31\1\103" +
					"\1\31\1\105\1\31\1\106\1\31\1\17\2\31\1\45\1\34\1\46\1\60\1\31\1\0\1\65\1" +
					"\62\1\71\1\74\1\64\1\36\1\113\1\100\1\73\1\112\1\66\1\75\1\114\1\37\1\72\1" +
					"\23\1\31\1\63\1\76\1\67\1\70\1\107\1\77\1\16\1\111\1\31\1\41\1\56\1\4\1\115" +
					"\2\26\1\27\2\26\1\5\1\0\4\10\4\0\1\31\2\0\1\26\3\0\1\31\2\0\3\31\1\0\2\31" +
					"\4\0\3\31\3\0\1\31\1\0\1\31\1\0\4\32\1\31\1\0\4\31\1\0\1\30\2\31\1\0\3\31" +
					"\1\0\1\32\2\30\2\31\4\30\1\0\3\31\3\0\1\10\1\0\5\32\1\0\1\32\1\0\2\32\1\0" +
					"\1\26\3\0\3\32\1\0\3\31\3\32\2\0\1\32\3\31\1\0\1\31\3\32\1\26\1\0\2\32\2\31" +
					"\2\32\1\0\4\32\3\31\2\0\1\31\3\0\1\26\1\31\1\32\4\31\3\32\1\31\2\0\2\32\1" +
					"\31\1\32\1\31\3\32\1\31\1\30\3\31\4\30\1\0\4\30\2\0\2\30\1\0\1\30\3\32\1\30" +
					"\1\32\1\31\2\32\2\0\2\32\1\30\3\31\1\30\4\32\2\0\3\32\1\31\4\0\1\32\2\31\2" +
					"\10\3\0\1\31\1\0\2\31\2\0\1\32\2\0\1\31\1\32\3\0\1\10\3\0\1\30\4\0\1\32\3" +
					"\31\1\30\1\0\2\30\2\32\1\0\1\30\2\32\3\30\1\32\3\0\1\30\2\0\1\32\1\0\1\32" +
					"\1\0\1\32\3\0\2\30\1\0\1\31\1\0\1\31\1\0\1\32\1\0\2\32\3\0\3\32\2\31\1\30" +
					"\2\0\1\5\3\31\1\30\3\0\1\31\1\0\2\32\1\31\1\32\1\31\1\0\1\31\2\30\1\0\3\30" +
					"\1\0\1\32\2\31\1\0\7\5\1\26\2\3\5\26\1\5\3\0\1\5\2\0\2\26\7\10\1\0\1\32\4" +
					"\30\1\32\2\30\1\5\3\0\2\32\1\0\4\31\1\30\2\31\1\32\1\31\1\10\3\0\1\32\1\30" +
					"\4\0\1\31\1\32\1\31\2\32\2\0\1\31\1\32\2\31\2\0\1\26\1\0\2\10\2\0\3\26\1\0" +
					"\3\30\2\0\1\30\1\0\2\32\1\30\1\0\1\30\2\0\1\30\1\0\2\30\1\0\3\32\4\26\1\32");

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
			"\4\0\1\1\3\2\3\1\1\3\1\4\1\5\1\6" +
					"\1\7\2\10\1\11\1\12\1\13\2\3\3\7\1\14" +
					"\1\15\1\16\1\3\1\17\1\20\1\21\1\22\1\23" +
					"\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33" +
					"\13\7\1\34\1\35\1\3\1\36\1\7\2\3\1\26" +
					"\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\0" +
					"\1\46\1\47\1\50\1\51\1\52\1\0\1\52\1\0" +
					"\1\53\1\0\1\54\1\55\1\56\1\57\1\60\1\0" +
					"\1\61\3\0\3\7\1\62\1\63\1\64\1\65\2\0" +
					"\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75" +
					"\1\76\6\7\1\77\1\100\7\7\2\0\1\101\1\0" +
					"\1\101\1\42\1\44\1\52\1\0\1\102\3\0\1\7" +
					"\1\103\1\7\2\0\4\7\1\104\12\7\1\105\1\0" +
					"\1\44\1\0\1\102\2\0\1\7\1\106\2\0\2\7" +
					"\1\107\1\110\1\7\1\111\11\7\3\0\1\112\1\0" +
					"\1\113\1\114\2\7\1\115\1\7\1\116\5\7\1\117" +
					"\1\7\1\120\1\0\1\121\5\7\1\122\1\123\1\7" +
					"\1\0\1\124\2\7\1\125\2\7\1\0\1\126\3\7" +
					"\1\127\1\130\1\131";

	private static int[] zzUnpackAction() {
		int[] result = new int[227];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
			"\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229" +
					"\0\u0278\0\u02c7\0\u0316\0\u013c\0\u013c\0\u0365\0\u03b4\0\u0403" +
					"\0\u0452\0\u04a1\0\u04f0\0\u053f\0\u058e\0\u05dd\0\u062c\0\u067b" +
					"\0\u06ca\0\u0719\0\u013c\0\u0768\0\u07b7\0\u0806\0\u013c\0\u013c" +
					"\0\u013c\0\u013c\0\u013c\0\u013c\0\u013c\0\u0855\0\u08a4\0\u08f3" +
					"\0\u0942\0\u0991\0\u09e0\0\u0a2f\0\u0a7e\0\u0acd\0\u0b1c\0\u0b6b" +
					"\0\u0bba\0\u0c09\0\u0c58\0\u0ca7\0\u0cf6\0\u0d45\0\u0d94\0\u013c" +
					"\0\u0de3\0\u0e32\0\u0e81\0\u0ed0\0\u0f1f\0\u013c\0\u013c\0\u0f6e" +
					"\0\u013c\0\u0fbd\0\u100c\0\u105b\0\u013c\0\u10aa\0\u013c\0\u013c" +
					"\0\u013c\0\u013c\0\u013c\0\u10f9\0\u1148\0\u1197\0\u11e6\0\u1235" +
					"\0\u013c\0\u013c\0\u013c\0\u013c\0\u013c\0\u05dd\0\u013c\0\u1284" +
					"\0\u062c\0\u12d3\0\u1322\0\u1371\0\u13c0\0\u013c\0\u013c\0\u013c" +
					"\0\u013c\0\u140f\0\u145e\0\u013c\0\u013c\0\u013c\0\u013c\0\u013c" +
					"\0\u013c\0\u013c\0\u013c\0\u013c\0\u14ad\0\u14fc\0\u154b\0\u159a" +
					"\0\u15e9\0\u1638\0\u0403\0\u1687\0\u16d6\0\u1725\0\u1774\0\u17c3" +
					"\0\u1812\0\u1861\0\u18b0\0\u18ff\0\u0ed0\0\u0ed0\0\u0f1f\0\u0f1f" +
					"\0\u194e\0\u199d\0\u19ec\0\u1a3b\0\u1a8a\0\u1ad9\0\u1b28\0\u1b77" +
					"\0\u1bc6\0\u0403\0\u1c15\0\u1c64\0\u1cb3\0\u1d02\0\u1d51\0\u1da0" +
					"\0\u1def\0\u0403\0\u1e3e\0\u1e8d\0\u1edc\0\u1f2b\0\u1f7a\0\u1fc9" +
					"\0\u2018\0\u2067\0\u20b6\0\u2105\0\u0403\0\u2154\0\u013c\0\u199d" +
					"\0\u013c\0\u21a3\0\u21f2\0\u2241\0\u0403\0\u2290\0\u22df\0\u232e" +
					"\0\u237d\0\u23cc\0\u0403\0\u241b\0\u0403\0\u246a\0\u24b9\0\u2508" +
					"\0\u2557\0\u25a6\0\u25f5\0\u2644\0\u2693\0\u26e2\0\u2731\0\u2780" +
					"\0\u27cf\0\u0403\0\u281e\0\u013c\0\u0403\0\u286d\0\u28bc\0\u0403" +
					"\0\u290b\0\u0403\0\u295a\0\u29a9\0\u29f8\0\u2a47\0\u2a96\0\u0403" +
					"\0\u2ae5\0\u013c\0\u2b34\0\u0403\0\u2b83\0\u2bd2\0\u2c21\0\u2c70" +
					"\0\u2cbf\0\u0403\0\u0403\0\u2d0e\0\u2d5d\0\u0403\0\u2dac\0\u2dfb" +
					"\0\u0403\0\u2e4a\0\u2e99\0\u2ee8\0\u0403\0\u2f37\0\u2f86\0\u2fd5" +
					"\0\u013c\0\u0403\0\u0403";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[227];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 =
			"\1\5\1\6\2\7\1\5\1\10\1\11\20\5\1\7" +
					"\10\5\1\12\1\5\1\13\54\5\1\14\1\6\2\7" +
					"\1\15\1\10\1\16\1\17\1\20\1\21\1\20\1\21" +
					"\1\20\1\22\3\20\1\23\1\24\2\20\1\25\1\14" +
					"\1\7\1\14\1\20\1\14\1\26\1\14\1\27\1\30" +
					"\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40" +
					"\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50" +
					"\1\51\1\52\1\53\1\54\1\55\1\56\2\20\1\57" +
					"\1\20\1\60\1\20\1\61\1\62\1\20\1\63\1\64" +
					"\1\20\1\65\5\20\1\66\1\67\4\20\1\14\1\70" +
					"\1\14\1\6\2\7\1\14\1\10\1\71\1\14\1\20" +
					"\1\72\1\73\1\72\1\73\1\72\3\73\1\72\1\14" +
					"\2\73\2\14\1\7\1\72\1\73\1\72\1\74\1\14" +
					"\1\75\2\73\1\32\10\14\1\72\2\14\1\76\4\14" +
					"\1\77\26\73\1\14\4\73\2\14\1\100\2\0\1\100" +
					"\1\101\112\100\120\0\1\6\2\7\1\102\1\10\21\0" +
					"\1\7\70\0\1\6\2\7\1\0\1\10\21\0\1\7" +
					"\70\0\3\10\1\0\1\10\21\0\1\10\75\0\1\103" +
					"\1\104\150\0\1\105\63\0\1\106\34\0\1\107\1\110" +
					"\60\0\1\103\1\104\44\0\1\111\116\0\1\112\52\0" +
					"\11\20\2\0\2\20\1\0\2\20\1\0\2\20\3\0" +
					"\3\20\21\0\26\20\1\0\4\20\13\0\1\21\1\0" +
					"\1\21\1\113\1\21\2\0\1\114\1\0\1\115\41\0" +
					"\1\114\13\0\1\113\27\0\1\116\1\0\1\117\1\113" +
					"\1\117\2\120\1\114\1\0\1\115\41\0\1\114\13\0" +
					"\1\113\37\0\1\121\32\0\1\122\53\0\1\115\1\0" +
					"\1\115\1\0\1\115\77\0\1\123\26\0\1\124\26\0" +
					"\1\125\42\0\1\126\2\0\30\126\1\127\1\130\1\0" +
					"\61\126\1\131\2\0\30\131\1\0\1\132\1\127\61\131" +
					"\10\0\11\20\2\0\2\20\1\0\2\20\1\0\2\20" +
					"\3\0\3\20\21\0\3\20\1\133\4\20\1\134\15\20" +
					"\1\0\4\20\12\0\11\20\2\0\2\20\1\0\2\20" +
					"\1\0\2\20\3\0\3\20\21\0\6\20\1\135\17\20" +
					"\1\0\4\20\12\0\11\20\2\0\2\20\1\0\2\20" +
					"\1\0\2\20\3\0\3\20\1\105\20\0\26\20\1\0" +
					"\4\20\44\0\1\136\11\0\1\137\116\0\1\140\4\0" +
					"\1\141\73\0\1\142\26\0\1\143\105\0\1\144\116\0" +
					"\1\145\116\0\1\146\1\0\1\147\114\0\1\150\2\0" +
					"\1\151\113\0\1\152\116\0\1\153\4\0\1\154\45\0" +
					"\11\20\2\0\2\20\1\0\2\20\1\0\2\20\3\0" +
					"\3\20\21\0\1\20\1\155\24\20\1\0\4\20\12\0" +
					"\11\20\2\0\2\20\1\0\2\20\1\0\2\20\3\0" +
					"\3\20\21\0\2\20\1\156\23\20\1\0\4\20\12\0" +
					"\11\20\2\0\2\20\1\0\2\20\1\0\2\20\3\0" +
					"\3\20\21\0\13\20\1\157\12\20\1\0\4\20\12\0" +
					"\11\20\2\0\2\20\1\0\2\20\1\0\2\20\3\0" +
					"\3\20\21\0\1\20\1\160\24\20\1\0\4\20\12\0" +
					"\11\20\2\0\2\20\1\0\2\20\1\0\2\20\3\0" +
					"\3\20\21\0\3\20\1\161\4\20\1\162\15\20\1\0" +
					"\4\20\12\0\11\20\2\0\2\20\1\0\2\20\1\0" +
					"\2\20\3\0\1\163\1\164\1\20\21\0\26\20\1\0" +
					"\4\20\12\0\11\20\2\0\2\20\1\0\2\20\1\0" +
					"\2\20\3\0\3\20\21\0\2\20\1\165\6\20\1\166" +
					"\14\20\1\0\4\20\12\0\11\20\2\0\2\20\1\0" +
					"\2\20\1\0\2\20\3\0\3\20\21\0\2\20\1\167" +
					"\12\20\1\170\10\20\1\0\4\20\12\0\11\20\2\0" +
					"\2\20\1\0\2\20\1\0\2\20\3\0\3\20\21\0" +
					"\16\20\1\171\7\20\1\0\4\20\12\0\11\20\2\0" +
					"\2\20\1\0\2\20\1\0\2\20\3\0\3\20\21\0" +
					"\20\20\1\172\5\20\1\0\4\20\12\0\11\20\2\0" +
					"\2\20\1\0\2\20\1\0\2\20\3\0\3\20\21\0" +
					"\3\20\1\173\22\20\1\0\4\20\71\0\1\174\35\0" +
					"\1\103\1\104\51\0\1\77\46\0\11\72\1\0\2\72" +
					"\3\0\3\72\3\0\2\72\11\0\1\72\10\0\26\72" +
					"\1\0\4\72\12\0\1\20\10\73\1\72\1\0\2\73" +
					"\1\0\2\20\1\72\2\73\3\0\2\73\1\20\10\0" +
					"\1\72\10\0\26\73\1\0\4\73\2\0\1\175\2\0" +
					"\30\175\1\176\1\0\62\175\1\177\2\0\31\177\1\0" +
					"\1\200\61\177\1\100\2\0\1\100\1\0\112\100\1\0" +
					"\1\201\2\102\23\0\1\102\67\0\1\103\2\0\114\103" +
					"\7\104\1\202\107\104\44\0\1\110\63\0\1\203\1\0" +
					"\1\203\1\0\1\203\3\0\1\204\3\0\1\204\102\0" +
					"\1\115\1\0\1\115\1\113\1\115\2\0\1\114\43\0" +
					"\1\114\13\0\1\113\27\0\1\116\1\0\1\116\1\113" +
					"\1\116\2\0\1\114\1\0\1\115\41\0\1\114\13\0" +
					"\1\113\27\0\1\116\1\0\1\117\1\113\1\117\2\0" +
					"\1\114\1\0\1\115\41\0\1\114\13\0\1\113\27\0" +
					"\3\205\1\0\1\205\2\0\1\205\1\0\1\206\2\114" +
					"\11\0\1\205\23\0\1\205\1\0\2\205\3\0\1\205" +
					"\2\0\1\205\4\0\1\205\2\0\1\205\23\0\2\207" +
					"\1\126\1\0\1\126\2\0\1\207\12\0\5\126\22\0" +
					"\2\126\2\207\1\0\1\126\1\0\1\207\2\0\1\207" +
					"\4\0\1\207\2\0\1\207\23\0\2\210\1\131\1\0" +
					"\1\131\2\0\1\210\12\0\5\131\22\0\2\131\2\210" +
					"\1\0\1\131\1\0\1\210\2\0\1\210\4\0\1\210" +
					"\2\0\1\210\22\0\11\20\2\0\2\20\1\0\2\20" +
					"\1\0\2\20\3\0\3\20\21\0\13\20\1\211\12\20" +
					"\1\0\4\20\12\0\11\20\2\0\2\20\1\0\2\20" +
					"\1\0\2\20\3\0\3\20\21\0\1\20\1\212\24\20" +
					"\1\0\4\20\12\0\11\20\2\0\2\20\1\0\2\20" +
					"\1\0\2\20\3\0\3\20\21\0\13\20\1\213\12\20" +
					"\1\0\4\20\65\0\1\214\145\0\1\215\14\0\11\20" +
					"\2\0\2\20\1\0\2\20\1\0\2\20\3\0\3\20" +
					"\21\0\2\20\1\216\23\20\1\0\4\20\12\0\11\20" +
					"\2\0\2\20\1\0\2\20\1\0\2\20\3\0\3\20" +
					"\21\0\5\20\1\217\20\20\1\0\4\20\12\0\11\20" +
					"\2\0\2\20\1\0\2\20\1\0\2\20\3\0\3\20" +
					"\21\0\14\20\1\220\11\20\1\0\4\20\12\0\11\20" +
					"\2\0\2\20\1\0\2\20\1\0\2\20\3\0\3\20" +
					"\21\0\6\20\1\221\17\20\1\0\1\222\3\20\12\0" +
					"\11\20\2\0\2\20\1\0\2\20\1\0\2\20\3\0" +
					"\3\20\21\0\5\20\1\223\6\20\1\224\11\20\1\0" +
					"\4\20\12\0\11\20\2\0\2\20\1\0\2\20\1\0" +
					"\2\20\3\0\1\20\1\225\1\20\21\0\26\20\1\0" +
					"\4\20\12\0\11\20\2\0\2\20\1\0\2\20\1\0" +
					"\2\20\3\0\3\20\21\0\5\20\1\226\20\20\1\0" +
					"\4\20\12\0\11\20\2\0\2\20\1\0\2\20\1\0" +
					"\2\20\3\0\1\227\2\20\21\0\26\20\1\0\4\20" +
					"\12\0\11\20\2\0\2\20\1\0\2\20\1\0\2\20" +
					"\3\0\3\20\21\0\1\20\1\230\24\20\1\0\4\20" +
					"\12\0\11\20\2\0\2\20\1\0\2\20\1\0\2\20" +
					"\3\0\3\20\21\0\13\20\1\231\12\20\1\0\4\20" +
					"\12\0\11\20\2\0\2\20\1\0\2\20\1\0\2\20" +
					"\3\0\3\20\21\0\11\20\1\232\14\20\1\0\4\20" +
					"\12\0\11\20\2\0\2\20\1\0\2\20\1\0\2\20" +
					"\3\0\3\20\21\0\11\20\1\233\14\20\1\0\4\20" +
					"\12\0\11\20\2\0\2\20\1\0\2\20\1\0\2\20" +
					"\3\0\3\20\21\0\21\20\1\234\4\20\1\0\4\20" +
					"\12\0\11\20\2\0\2\20\1\0\2\20\1\0\2\20" +
					"\3\0\3\20\21\0\1\20\1\235\24\20\1\0\4\20" +
					"\113\0\1\236\6\0\1\201\3\102\22\0\1\102\67\0" +
					"\6\104\1\237\1\240\107\104\11\0\1\203\1\0\1\203" +
					"\1\113\1\203\62\0\1\113\27\0\1\203\1\0\1\203" +
					"\1\0\1\203\112\0\3\205\1\241\1\205\2\0\1\205" +
					"\1\0\1\206\2\114\11\0\1\205\23\0\1\205\1\0" +
					"\2\205\3\0\1\205\2\0\1\205\3\0\1\241\1\205" +
					"\2\0\1\205\23\0\3\206\1\0\1\206\2\0\1\206" +
					"\2\0\2\114\11\0\1\206\23\0\1\206\1\0\2\206" +
					"\3\0\1\206\2\0\1\206\4\0\1\206\2\0\1\206" +
					"\23\0\3\242\1\0\1\242\2\0\1\242\15\0\1\242" +
					"\23\0\1\242\1\0\2\242\3\0\1\242\2\0\1\242" +
					"\4\0\1\242\2\0\1\242\23\0\3\243\1\0\1\243" +
					"\2\0\1\243\15\0\1\243\23\0\1\243\1\0\2\243" +
					"\3\0\1\243\2\0\1\243\4\0\1\243\2\0\1\243" +
					"\22\0\11\20\2\0\2\20\1\0\2\20\1\0\2\20" +
					"\3\0\3\20\21\0\14\20\1\244\11\20\1\0\4\20" +
					"\12\0\11\20\2\0\2\20\1\0\2\20\1\0\2\20" +
					"\3\0\3\20\21\0\13\20\1\245\12\20\1\0\4\20" +
					"\67\0\1\246\116\0\1\247\41\0\11\20\2\0\2\20" +
					"\1\0\2\20\1\0\2\20\3\0\3\20\21\0\3\20" +
					"\1\250\22\20\1\0\4\20\12\0\11\20\2\0\2\20" +
					"\1\0\2\20\1\0\2\20\3\0\3\20\21\0\6\20" +
					"\1\251\17\20\1\0\4\20\12\0\11\20\2\0\2\20" +
					"\1\0\2\20\1\0\2\20\3\0\3\20\21\0\2\20" +
					"\1\252\23\20\1\0\4\20\12\0\11\20\2\0\2\20" +
					"\1\0\2\20\1\0\2\20\3\0\3\20\21\0\2\20" +
					"\1\253\23\20\1\0\4\20\12\0\11\20\2\0\2\20" +
					"\1\0\2\20\1\0\2\20\3\0\3\20\21\0\7\20" +
					"\1\254\16\20\1\0\4\20\12\0\11\20\2\0\2\20" +
					"\1\0\2\20\1\0\2\20\3\0\3\20\21\0\2\20" +
					"\1\255\23\20\1\0\4\20\12\0\11\20\2\0\2\20" +
					"\1\0\2\20\1\0\2\20\3\0\3\20\21\0\5\20" +
					"\1\256\6\20\1\257\11\20\1\0\4\20\12\0\11\20" +
					"\2\0\2\20\1\0\2\20\1\0\2\20\3\0\3\20" +
					"\21\0\2\20\1\260\23\20\1\0\4\20\12\0\11\20" +
					"\2\0\2\20\1\0\2\20\1\0\2\20\3\0\3\20" +
					"\21\0\3\20\1\261\22\20\1\0\4\20\12\0\11\20" +
					"\2\0\2\20\1\0\2\20\1\0\2\20\3\0\3\20" +
					"\21\0\2\20\1\262\23\20\1\0\4\20\12\0\11\20" +
					"\2\0\2\20\1\0\2\20\1\0\2\20\3\0\3\20" +
					"\21\0\2\20\1\263\23\20\1\0\4\20\12\0\11\20" +
					"\2\0\2\20\1\0\2\20\1\0\2\20\3\0\3\20" +
					"\21\0\5\20\1\264\20\20\1\0\4\20\12\0\11\20" +
					"\2\0\2\20\1\0\2\20\1\0\2\20\3\0\3\20" +
					"\21\0\13\20\1\265\12\20\1\0\4\20\12\0\10\20" +
					"\1\266\2\0\2\20\1\0\2\20\1\0\2\20\3\0" +
					"\3\20\21\0\26\20\1\0\4\20\25\0\1\267\104\0" +
					"\3\270\1\0\1\270\2\0\1\270\15\0\1\270\23\0" +
					"\1\270\1\0\2\270\3\0\1\270\2\0\1\270\4\0" +
					"\1\270\2\0\1\270\23\0\3\271\1\0\1\271\2\0" +
					"\1\271\15\0\1\271\23\0\1\271\1\0\2\271\3\0" +
					"\1\271\2\0\1\271\4\0\1\271\2\0\1\271\22\0" +
					"\11\20\2\0\2\20\1\0\2\20\1\0\2\20\3\0" +
					"\3\20\21\0\2\20\1\272\23\20\1\0\4\20\115\0" +
					"\1\273\21\0\1\274\110\0\11\20\2\0\2\20\1\0" +
					"\2\20\1\0\2\20\3\0\3\20\21\0\4\20\1\275" +
					"\21\20\1\0\4\20\12\0\11\20\2\0\2\20\1\0" +
					"\2\20\1\0\2\20\3\0\3\20\21\0\1\20\1\276" +
					"\24\20\1\0\4\20\12\0\11\20\2\0\2\20\1\0" +
					"\2\20\1\0\2\20\3\0\1\277\2\20\21\0\26\20" +
					"\1\0\4\20\12\0\11\20\2\0\2\20\1\0\2\20" +
					"\1\0\2\20\3\0\3\20\21\0\16\20\1\300\7\20" +
					"\1\0\4\20\12\0\11\20\2\0\2\20\1\0\2\20" +
					"\1\0\2\20\3\0\3\20\21\0\11\20\1\301\14\20" +
					"\1\0\4\20\12\0\11\20\2\0\2\20\1\0\2\20" +
					"\1\0\2\20\3\0\3\20\21\0\5\20\1\302\20\20" +
					"\1\0\4\20\12\0\11\20\2\0\2\20\1\0\2\20" +
					"\1\0\2\20\3\0\3\20\21\0\1\20\1\303\24\20" +
					"\1\0\4\20\12\0\11\20\2\0\2\20\1\0\2\20" +
					"\1\0\2\20\3\0\3\20\21\0\6\20\1\304\17\20" +
					"\1\0\4\20\12\0\11\20\2\0\2\20\1\0\2\20" +
					"\1\0\2\20\3\0\3\20\21\0\7\20\1\305\16\20" +
					"\1\0\4\20\12\0\11\20\2\0\2\20\1\0\2\20" +
					"\1\0\2\20\3\0\3\20\21\0\7\20\1\306\16\20" +
					"\1\0\4\20\12\0\11\20\2\0\2\20\1\0\2\20" +
					"\1\0\2\20\3\0\3\20\21\0\7\20\1\307\16\20" +
					"\1\0\4\20\12\0\11\20\2\0\2\20\1\0\2\20" +
					"\1\0\2\20\3\0\3\20\21\0\2\20\1\310\23\20" +
					"\1\0\4\20\12\0\11\20\2\0\2\20\1\0\2\20" +
					"\1\0\2\20\3\0\3\20\21\0\22\20\1\311\3\20" +
					"\1\0\4\20\66\0\1\312\43\0\3\126\1\0\1\126" +
					"\2\0\1\126\15\0\1\126\23\0\1\126\1\0\2\126" +
					"\3\0\1\126\2\0\1\126\4\0\1\126\2\0\1\126" +
					"\23\0\3\131\1\0\1\131\2\0\1\131\15\0\1\131" +
					"\23\0\1\131\1\0\2\131\3\0\1\131\2\0\1\131" +
					"\4\0\1\131\2\0\1\131\126\0\1\313\12\0\11\20" +
					"\2\0\2\20\1\0\2\20\1\0\2\20\3\0\1\20" +
					"\1\314\1\20\21\0\26\20\1\0\4\20\12\0\11\20" +
					"\2\0\2\20\1\0\2\20\1\0\2\20\3\0\3\20" +
					"\21\0\10\20\1\315\15\20\1\0\4\20\12\0\11\20" +
					"\2\0\2\20\1\0\2\20\1\0\2\20\3\0\1\20" +
					"\1\316\1\20\21\0\26\20\1\0\4\20\12\0\11\20" +
					"\2\0\2\20\1\0\2\20\1\0\2\20\3\0\1\317" +
					"\2\20\21\0\26\20\1\0\4\20\12\0\11\20\2\0" +
					"\2\20\1\0\2\20\1\0\2\20\3\0\3\20\21\0" +
					"\13\20\1\320\12\20\1\0\4\20\12\0\11\20\2\0" +
					"\2\20\1\0\2\20\1\0\2\20\3\0\3\20\21\0" +
					"\5\20\1\321\20\20\1\0\4\20\12\0\11\20\2\0" +
					"\2\20\1\0\2\20\1\0\2\20\3\0\3\20\21\0" +
					"\5\20\1\322\20\20\1\0\4\20\12\0\11\20\2\0" +
					"\2\20\1\0\2\20\1\0\2\20\3\0\3\20\21\0" +
					"\16\20\1\323\7\20\1\0\4\20\12\0\11\20\2\0" +
					"\2\20\1\0\2\20\1\0\2\20\3\0\3\20\21\0" +
					"\23\20\1\324\2\20\1\0\4\20\66\0\1\325\42\0" +
					"\11\20\2\0\2\20\1\0\2\20\1\0\2\20\3\0" +
					"\3\20\21\0\1\20\1\326\24\20\1\0\4\20\12\0" +
					"\11\20\2\0\2\20\1\0\2\20\1\0\2\20\3\0" +
					"\3\20\21\0\6\20\1\327\17\20\1\0\4\20\12\0" +
					"\11\20\2\0\2\20\1\0\2\20\1\0\2\20\3\0" +
					"\3\20\21\0\3\20\1\330\22\20\1\0\4\20\12\0" +
					"\11\20\2\0\2\20\1\0\2\20\1\0\2\20\3\0" +
					"\3\20\21\0\5\20\1\331\20\20\1\0\4\20\12\0" +
					"\11\20\2\0\2\20\1\0\2\20\1\0\2\20\3\0" +
					"\3\20\21\0\11\20\1\332\14\20\1\0\4\20\12\0" +
					"\11\20\2\0\2\20\1\0\2\20\1\0\2\20\3\0" +
					"\3\20\21\0\20\20\1\333\5\20\1\0\4\20\41\0" +
					"\1\334\67\0\11\20\2\0\2\20\1\0\2\20\1\0" +
					"\2\20\3\0\3\20\21\0\2\20\1\335\23\20\1\0" +
					"\4\20\12\0\11\20\2\0\2\20\1\0\2\20\1\0" +
					"\2\20\3\0\3\20\21\0\7\20\1\336\16\20\1\0" +
					"\4\20\12\0\11\20\2\0\2\20\1\0\2\20\1\0" +
					"\2\20\3\0\3\20\21\0\25\20\1\337\1\0\4\20" +
					"\12\0\11\20\2\0\2\20\1\0\2\20\1\0\2\20" +
					"\3\0\3\20\21\0\24\20\1\340\1\20\1\0\4\20" +
					"\71\0\1\341\37\0\11\20\2\0\2\20\1\0\2\20" +
					"\1\0\2\20\3\0\3\20\21\0\2\20\1\342\23\20" +
					"\1\0\4\20\12\0\11\20\2\0\2\20\1\0\2\20" +
					"\1\0\2\20\3\0\3\20\21\0\2\20\1\343\23\20" +
					"\1\0\4\20\12\0\10\20\1\343\2\0\2\20\1\0" +
					"\2\20\1\0\2\20\3\0\3\20\21\0\26\20\1\0" +
					"\4\20\2\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[12324];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String[] ZZ_ERROR_MSG = {
			"Unknown internal scanner error",
			"Error: could not match input",
			"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
			"\4\0\1\11\6\1\2\11\15\1\1\11\3\1\7\11" +
					"\22\1\1\11\5\1\2\11\1\1\1\11\3\1\1\11" +
					"\1\0\5\11\1\0\1\1\1\0\1\1\1\0\5\11" +
					"\1\0\1\11\3\0\3\1\4\11\2\0\11\11\17\1" +
					"\2\0\1\1\1\0\4\1\1\0\1\1\3\0\3\1" +
					"\2\0\20\1\1\0\1\11\1\0\1\11\2\0\2\1" +
					"\2\0\17\1\3\0\1\1\1\0\1\11\15\1\1\11" +
					"\1\0\11\1\1\0\6\1\1\0\4\1\1\11\2\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[227];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * the input device
	 */
	private java.io.Reader zzReader;

	/**
	 * the current state of the DFA
	 */
	private int zzState;

	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private CharSequence zzBuffer = "";

	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;

	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;

	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;

	/**
	 * denotes if the user-EOF-code has already been executed
	 */
	private boolean zzEOFDone;

	/* user code: */
	public _BeetlLexer() {
		this((java.io.Reader) null);
	}

	private IElementType lexerTemplateData() {
		int i = StringUtils.indexOf(zzBuffer, "<%", zzCurrentPos);
		if (-1 != i) {
			zzMarkedPos = i;
		} else {
			int j = StringUtils.indexOf(zzBuffer, "<#", zzCurrentPos);
			if (-1 != j) {
				zzMarkedPos = j;
			} else {
				int k = StringUtils.indexOf(zzBuffer, "</#", zzCurrentPos);
				if (-1 != k) {
					zzMarkedPos = k;
				} else {
					zzMarkedPos = zzEndRead;
				}
			}
		}
		System.out.println("----------------lexerTemplateData start");
//		System.out.println("zzBuffer : " + this.zzBuffer);
		System.out.println("匹配文本:" + yytext());
		System.out.println("匹配文本长度" + yylength());

		System.out.println("zzState : " + this.zzState);
		System.out.println("lexer state: " + yystate());
		System.out.println("zzLexicalState : " + this.zzLexicalState);

		System.out.println("本次匹配开始位置 : " + this.zzCurrentPos);
		System.out.println("本次匹配结束位置 : " + this.zzMarkedPos);

		System.out.println("本次开始读取位置 : " + this.zzStartRead);
		System.out.println("词法结束读取位置 : " + this.zzEndRead);
		//  	System.out.println(yyline);
		//  	System.out.println(yychar);
		//  	System.out.println(yycolumn);
		System.out.println("----------------lexerTemplateData end");
		return BTL_TEMPLATE_HTML_TEXT;
	}


	/**
	 * Creates a new scanner
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	public _BeetlLexer(java.io.Reader in) {
		this.zzReader = in;
	}


	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		int size = 0;
		for (int i = 0, length = packed.length(); i < length; i += 2) {
			size += packed.charAt(i);
		}
		char[] map = new char[size];
		int i = 0;  /* index in packed string  */
		int j = 0;  /* index in unpacked array */
		while (i < packed.length()) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do map[j++] = value; while (--count > 0);
		}
		return map;
	}

	private static String zzToPrintable(CharSequence str) {
		StringBuilder builder = new StringBuilder();
		for (int n = 0; n < str.length(); ) {
			int ch = Character.codePointAt(str, n);
			int charCount = Character.charCount(ch);
			n += charCount;
			if (ch > 31 && ch < 127) {
				builder.append((char) ch);
			} else if (charCount == 1) {
				builder.append(String.format("\\u%04X", ch));
			} else {
				builder.append(String.format("\\U%06X", ch));
			}
		}
		return builder.toString();
	}

	public final int getTokenStart() {
		return zzStartRead;
	}

	public final int getTokenEnd() {
		return getTokenStart() + yylength();
	}

	public void reset(CharSequence buffer, int start, int end, int initialState) {
		zzBuffer = buffer;
		zzCurrentPos = zzMarkedPos = zzStartRead = start;
		zzAtEOF = false;
		zzAtBOL = true;
		zzEndRead = end;
		yybegin(initialState);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {
		return true;
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final CharSequence yytext() {
		return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
	}


	/**
	 * Returns the character at position <tt>pos</tt> from the
	 * matched text.
	 * <p>
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer.charAt(zzStartRead + pos);
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occured while scanning.
	 * <p>
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p>
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * <p>
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again.
	 *               This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}


	/**
	 * Contains user EOF-code, which will be executed exactly once,
	 * when the end of file is reached
	 */
	private void zzDoEOF() {
		if (!zzEOFDone) {
			zzEOFDone = true;

		}
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	public IElementType advance() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		CharSequence zzBufferL = zzBuffer;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}


			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
						zzCurrentPosL += Character.charCount(zzInput);
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				zzAtEOF = true;
				zzDoEOF();
				return null;
			} else {
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
					case 1:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [158] { return lexerTemplateData(); }");
					{
						return lexerTemplateData();
					}
					// fall through
					case 90:
						break;
					case 2:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [149] { return BeetlParserDefinition.WHITE_SPACES; }");
					{
						return BeetlParserDefinition.WHITE_SPACES;
					}
					// fall through
					case 91:
						break;
					case 3:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [273] { return BAD_CHARACTER; }");
					{
						return BAD_CHARACTER;
					}
					// fall through
					case 92:
						break;
					case 4:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [173] { return BeetlTokenTypes.BT_RBRACE; }");
					{
						return BeetlTokenTypes.BT_RBRACE;
					}
					// fall through
					case 93:
						break;
					case 5:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [218] { return BeetlTokenTypes.BT_QUOTIENT; }");
					{
						return BeetlTokenTypes.BT_QUOTIENT;
					}
					// fall through
					case 94:
						break;
					case 6:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [215] { return BeetlTokenTypes.BT_MUL; }");
					{
						return BeetlTokenTypes.BT_MUL;
					}
					// fall through
					case 95:
						break;
					case 7:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [264] { return BeetlTokenTypes.BT_IDENTIFIER; }");
					{
						return BeetlTokenTypes.BT_IDENTIFIER;
					}
					// fall through
					case 96:
						break;
					case 8:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [271] { return BeetlTokenTypes.BT_INT; }");
					{
						return BeetlTokenTypes.BT_INT;
					}
					// fall through
					case 97:
						break;
					case 9:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [198] { return BeetlTokenTypes.BT_MINUS; }");
					{
						return BeetlTokenTypes.BT_MINUS;
					}
					// fall through
					case 98:
						break;
					case 10:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [168] { return BeetlTokenTypes.BT_DOT; }");
					{
						return BeetlTokenTypes.BT_DOT;
					}
					// fall through
					case 99:
						break;
					case 11:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [194] { return BeetlTokenTypes.BT_PLUS; }");
					{
						return BeetlTokenTypes.BT_PLUS;
					}
					// fall through
					case 100:
						break;
					case 12:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [172] { return BeetlTokenTypes.BT_LBRACE; }");
					{
						return BeetlTokenTypes.BT_LBRACE;
					}
					// fall through
					case 101:
						break;
					case 13:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [209] { return BeetlTokenTypes.BT_LESS; }");
					{
						return BeetlTokenTypes.BT_LESS;
					}
					// fall through
					case 102:
						break;
					case 14:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [223] { return BeetlTokenTypes.BT_REMAINDER; }");
					{
						return BeetlTokenTypes.BT_REMAINDER;
					}
					// fall through
					case 103:
						break;
					case 15:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [175] { return BeetlTokenTypes.BT_LBRACK; }");
					{
						return BeetlTokenTypes.BT_LBRACK;
					}
					// fall through
					case 104:
						break;
					case 16:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [176] { return BeetlTokenTypes.BT_RBRACK; }");
					{
						return BeetlTokenTypes.BT_RBRACK;
					}
					// fall through
					case 105:
						break;
					case 17:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [178] { return BeetlTokenTypes.BT_LPAREN; }");
					{
						return BeetlTokenTypes.BT_LPAREN;
					}
					// fall through
					case 106:
						break;
					case 18:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [179] { return BeetlTokenTypes.BT_RPAREN; }");
					{
						return BeetlTokenTypes.BT_RPAREN;
					}
					// fall through
					case 107:
						break;
					case 19:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [181] { return BeetlTokenTypes.BT_COLON; }");
					{
						return BeetlTokenTypes.BT_COLON;
					}
					// fall through
					case 108:
						break;
					case 20:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [182] { return BeetlTokenTypes.BT_SEMICOLON; }");
					{
						return BeetlTokenTypes.BT_SEMICOLON;
					}
					// fall through
					case 109:
						break;
					case 21:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [183] { return BeetlTokenTypes.BT_COMMA; }");
					{
						return BeetlTokenTypes.BT_COMMA;
					}
					// fall through
					case 110:
						break;
					case 22:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [186] { return BeetlTokenTypes.BT_ASSIGN; }");
					{
						return BeetlTokenTypes.BT_ASSIGN;
					}
					// fall through
					case 111:
						break;
					case 23:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [189] { return BeetlTokenTypes.BT_NOT; }");
					{
						return BeetlTokenTypes.BT_NOT;
					}
					// fall through
					case 112:
						break;
					case 24:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [190] { return BeetlTokenTypes.BT_BIT_OR; }");
					{
						return BeetlTokenTypes.BT_BIT_OR;
					}
					// fall through
					case 113:
						break;
					case 25:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [205] { return BeetlTokenTypes.BT_BIT_AND; }");
					{
						return BeetlTokenTypes.BT_BIT_AND;
					}
					// fall through
					case 114:
						break;
					case 26:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [212] { return BeetlTokenTypes.BT_BIT_XOR; }");
					{
						return BeetlTokenTypes.BT_BIT_XOR;
					}
					// fall through
					case 115:
						break;
					case 27:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [227] { return BeetlTokenTypes.BT_GREATER; }");
					{
						return BeetlTokenTypes.BT_GREATER;
					}
					// fall through
					case 116:
						break;
					case 28:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [258] { return BeetlTokenTypes.BT_AT; }");
					{
						return BeetlTokenTypes.BT_AT;
					}
					// fall through
					case 117:
						break;
					case 29:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [257] { return BeetlTokenTypes.BT_QUESTOIN; }");
					{
						return BeetlTokenTypes.BT_QUESTOIN;
					}
					// fall through
					case 118:
						break;
					case 30:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [288] { return BeetlTokenTypes.BT_ATTRIBUTE_NAME; }");
					{
						return BeetlTokenTypes.BT_ATTRIBUTE_NAME;
					}
					// fall through
					case 119:
						break;
					case 31:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [291] { yybegin(YYINITIAL); return BeetlTokenTypes.BT_HTML_TAG_END; }");
					{
						yybegin(YYINITIAL);
						return BeetlTokenTypes.BT_HTML_TAG_END;
					}
					// fall through
					case 120:
						break;
					case 32:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [296] { return BeetlTokenTypes.BT_PLACEHOLDER_VALUE; }");
					{
						return BeetlTokenTypes.BT_PLACEHOLDER_VALUE;
					}
					// fall through
					case 121:
						break;
					case 33:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [297] { yybegin(YYINITIAL); return BeetlTokenTypes.BT_RPLACEHOLDER; }");
					{
						yybegin(YYINITIAL);
						return BeetlTokenTypes.BT_RPLACEHOLDER;
					}
					// fall through
					case 122:
						break;
					case 34:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [150] { return BeetlParserDefinition.NEW_LINES; }");
					{
						return BeetlParserDefinition.NEW_LINES;
					}
					// fall through
					case 123:
						break;
					case 35:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [152] { return BeetlParserDefinition.LINE_COMMENT; }");
					{
						return BeetlParserDefinition.LINE_COMMENT;
					}
					// fall through
					case 124:
						break;
					case 36:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [153] { return BeetlParserDefinition.MULTILINE_COMMENT; }");
					{
						return BeetlParserDefinition.MULTILINE_COMMENT;
					}
					// fall through
					case 125:
						break;
					case 37:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [155] { yybegin(BTL_PLACEHOLDER); return BeetlTokenTypes.BT_LPLACEHOLDER; }");
					{
						yybegin(BTL_PLACEHOLDER);
						return BeetlTokenTypes.BT_LPLACEHOLDER;
					}
					// fall through
					case 126:
						break;
					case 38:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [156] { yybegin(BTL_LEX); return BeetlTokenTypes.BT_LDELIMITER; }");
					{
						yybegin(BTL_LEX);
						return BeetlTokenTypes.BT_LDELIMITER;
					}
					// fall through
					case 127:
						break;
					case 39:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [157] { yybegin(BTL_HTML_LEX); return BeetlTokenTypes.BT_HTML_TAG_START; }");
					{
						yybegin(BTL_HTML_LEX);
						return BeetlTokenTypes.BT_HTML_TAG_START;
					}
					// fall through
					case 128:
						break;
					case 40:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [217] { return BeetlTokenTypes.BT_QUOTIENT_ASSIGN; }");
					{
						return BeetlTokenTypes.BT_QUOTIENT_ASSIGN;
					}
					// fall through
					case 129:
						break;
					case 41:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [214] { return BeetlTokenTypes.BT_MUL_ASSIGN; }");
					{
						return BeetlTokenTypes.BT_MUL_ASSIGN;
					}
					// fall through
					case 130:
						break;
					case 42:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [268] { return BeetlTokenTypes.BT_FLOAT; }");
					{
						return BeetlTokenTypes.BT_FLOAT;
					}
					// fall through
					case 131:
						break;
					case 43:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [269] { return BeetlTokenTypes.BT_OCT; }");
					{
						return BeetlTokenTypes.BT_OCT;
					}
					// fall through
					case 132:
						break;
					case 44:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [196] { return BeetlTokenTypes.BT_DECREASE; }");
					{
						return BeetlTokenTypes.BT_DECREASE;
					}
					// fall through
					case 133:
						break;
					case 45:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [197] { return BeetlTokenTypes.BT_MINUS_ASSIGN; }");
					{
						return BeetlTokenTypes.BT_MINUS_ASSIGN;
					}
					// fall through
					case 134:
						break;
					case 46:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [256] { return BeetlTokenTypes.BT_VIRTUAL; }");
					{
						return BeetlTokenTypes.BT_VIRTUAL;
					}
					// fall through
					case 135:
						break;
					case 47:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [192] { return BeetlTokenTypes.BT_INCREASE; }");
					{
						return BeetlTokenTypes.BT_INCREASE;
					}
					// fall through
					case 136:
						break;
					case 48:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [193] { return BeetlTokenTypes.BT_PLUS_ASSIGN; }");
					{
						return BeetlTokenTypes.BT_PLUS_ASSIGN;
					}
					// fall through
					case 137:
						break;
					case 49:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [266] { return BeetlTokenTypes.BT_STRING; }");
					{
						return BeetlTokenTypes.BT_STRING;
					}
					// fall through
					case 138:
						break;
					case 50:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [207] { return BeetlTokenTypes.BT_SHIFT_LEFT; }");
					{
						return BeetlTokenTypes.BT_SHIFT_LEFT;
					}
					// fall through
					case 139:
						break;
					case 51:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [208] { return BeetlTokenTypes.BT_LESS_OR_EQUAL; }");
					{
						return BeetlTokenTypes.BT_LESS_OR_EQUAL;
					}
					// fall through
					case 140:
						break;
					case 52:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [222] { return BeetlTokenTypes.BT_REMAINDER_ASSIGN; }");
					{
						return BeetlTokenTypes.BT_REMAINDER_ASSIGN;
					}
					// fall through
					case 141:
						break;
					case 53:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [220] { yybegin(YYINITIAL); return BeetlTokenTypes.BT_RDELIMITER; }");
					{
						yybegin(YYINITIAL);
						return BeetlTokenTypes.BT_RDELIMITER;
					}
					// fall through
					case 142:
						break;
					case 54:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [185] { return BeetlTokenTypes.BT_EQ; }");
					{
						return BeetlTokenTypes.BT_EQ;
					}
					// fall through
					case 143:
						break;
					case 55:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [188] { return BeetlTokenTypes.BT_NOT_EQ; }");
					{
						return BeetlTokenTypes.BT_NOT_EQ;
					}
					// fall through
					case 144:
						break;
					case 56:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [201] { return BeetlTokenTypes.BT_BIT_OR_ASSIGN; }");
					{
						return BeetlTokenTypes.BT_BIT_OR_ASSIGN;
					}
					// fall through
					case 145:
						break;
					case 57:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [200] { return BeetlTokenTypes.BT_COND_OR; }");
					{
						return BeetlTokenTypes.BT_COND_OR;
					}
					// fall through
					case 146:
						break;
					case 58:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [204] { return BeetlTokenTypes.BT_BIT_AND_ASSIGN; }");
					{
						return BeetlTokenTypes.BT_BIT_AND_ASSIGN;
					}
					// fall through
					case 147:
						break;
					case 59:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [203] { return BeetlTokenTypes.BT_COND_AND; }");
					{
						return BeetlTokenTypes.BT_COND_AND;
					}
					// fall through
					case 148:
						break;
					case 60:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [211] { return BeetlTokenTypes.BT_BIT_XOR_ASSIGN; }");
					{
						return BeetlTokenTypes.BT_BIT_XOR_ASSIGN;
					}
					// fall through
					case 149:
						break;
					case 61:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [226] { return BeetlTokenTypes.BT_GREATER_OR_EQUAL; }");
					{
						return BeetlTokenTypes.BT_GREATER_OR_EQUAL;
					}
					// fall through
					case 150:
						break;
					case 62:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [225] { return BeetlTokenTypes.BT_SHIFT_RIGHT; }");
					{
						return BeetlTokenTypes.BT_SHIFT_RIGHT;
					}
					// fall through
					case 151:
						break;
					case 63:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [241] { return BeetlTokenTypes.BT_IF; }");
					{
						return BeetlTokenTypes.BT_IF;
					}
					// fall through
					case 152:
						break;
					case 64:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [262] { return BeetlTokenTypes.BT_FOR_IN; }");
					{
						return BeetlTokenTypes.BT_FOR_IN;
					}
					// fall through
					case 153:
						break;
					case 65:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [289] { return BeetlTokenTypes.BT_ATTRIBUTE_VALUE; }");
					{
						return BeetlTokenTypes.BT_ATTRIBUTE_VALUE;
					}
					// fall through
					case 154:
						break;
					case 66:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [270] { return BeetlTokenTypes.BT_HEX; }");
					{
						return BeetlTokenTypes.BT_HEX;
					}
					// fall through
					case 155:
						break;
					case 67:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [242] { return BeetlTokenTypes.BT_FOR; }");
					{
						return BeetlTokenTypes.BT_FOR;
					}
					// fall through
					case 156:
						break;
					case 68:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [251] { return BeetlTokenTypes.BT_TRY; }");
					{
						return BeetlTokenTypes.BT_TRY;
					}
					// fall through
					case 157:
						break;
					case 69:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [249] { return BeetlTokenTypes.BT_VAR; }");
					{
						return BeetlTokenTypes.BT_VAR;
					}
					// fall through
					case 158:
						break;
					case 70:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [259] { return BeetlTokenTypes.BT_NULL; }");
					{
						return BeetlTokenTypes.BT_NULL;
					}
					// fall through
					case 159:
						break;
					case 71:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [244] { return BeetlTokenTypes.BT_ELSE; }");
					{
						return BeetlTokenTypes.BT_ELSE;
					}
					// fall through
					case 160:
						break;
					case 72:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [260] { return BeetlTokenTypes.BT_TRUE; }");
					{
						return BeetlTokenTypes.BT_TRUE;
					}
					// fall through
					case 161:
						break;
					case 73:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [238] { return BeetlTokenTypes.BT_CASE; }");
					{
						return BeetlTokenTypes.BT_CASE;
					}
					// fall through
					case 162:
						break;
					case 74:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [261] { return BeetlTokenTypes.BT_FALSE; }");
					{
						return BeetlTokenTypes.BT_FALSE;
					}
					// fall through
					case 163:
						break;
					case 75:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [253] { return BeetlTokenTypes.BT_AJAX; }");
					{
						return BeetlTokenTypes.BT_AJAX;
					}
					// fall through
					case 164:
						break;
					case 76:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [229] { return BeetlTokenTypes.BT_BREAK; }");
					{
						return BeetlTokenTypes.BT_BREAK;
					}
					// fall through
					case 165:
						break;
					case 77:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [252] { return BeetlTokenTypes.BT_CATCH; }");
					{
						return BeetlTokenTypes.BT_CATCH;
					}
					// fall through
					case 166:
						break;
					case 78:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [239] { return BeetlTokenTypes.BT_CONST; }");
					{
						return BeetlTokenTypes.BT_CONST;
					}
					// fall through
					case 167:
						break;
					case 79:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [245] { return BeetlTokenTypes.BT_WHILE; }");
					{
						return BeetlTokenTypes.BT_WHILE;
					}
					// fall through
					case 168:
						break;
					case 80:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [248] { return BeetlTokenTypes.BT_TYPE_; }");
					{
						return BeetlTokenTypes.BT_TYPE_;
					}
					// fall through
					case 169:
						break;
					case 81:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [230] { return BeetlTokenTypes.BT_RETURN ; }");
					{
						return BeetlTokenTypes.BT_RETURN;
					}
					// fall through
					case 170:
						break;
					case 82:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [237] { return BeetlTokenTypes.BT_SELECT; }");
					{
						return BeetlTokenTypes.BT_SELECT;
					}
					// fall through
					case 171:
						break;
					case 83:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [236] { return BeetlTokenTypes.BT_SWITCH; }");
					{
						return BeetlTokenTypes.BT_SWITCH;
					}
					// fall through
					case 172:
						break;
					case 84:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [243] { return BeetlTokenTypes.BT_ELSE_FOR; }");
					{
						return BeetlTokenTypes.BT_ELSE_FOR;
					}
					// fall through
					case 173:
						break;
					case 85:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [233] { return BeetlTokenTypes.BT_DEFAULT; }");
					{
						return BeetlTokenTypes.BT_DEFAULT;
					}
					// fall through
					case 174:
						break;
					case 86:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [231] { return BeetlTokenTypes.BT_CONTINUE ; }");
					{
						return BeetlTokenTypes.BT_CONTINUE;
					}
					// fall through
					case 175:
						break;
					case 87:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [254] { return BeetlTokenTypes.BT_FRAGMENT; }");
					{
						return BeetlTokenTypes.BT_FRAGMENT;
					}
					// fall through
					case 176:
						break;
					case 88:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [234] { return BeetlTokenTypes.BT_INTERFACE; }");
					{
						return BeetlTokenTypes.BT_INTERFACE;
					}
					// fall through
					case 177:
						break;
					case 89:
						System.out.println("match: --" + zzToPrintable(yytext()) + "--");
						System.out.println("action [247] { return BeetlTokenTypes.BT_DIRECTIVE; }");
					{
						return BeetlTokenTypes.BT_DIRECTIVE;
					}
					// fall through
					case 178:
						break;
					default:
						zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

	/**
	 * Runs the scanner on input files.
	 * <p>
	 * This main method is the debugging routine for the scanner.
	 * It prints debugging information about each returned token to
	 * System.out until the end of file is reached, or an error occured.
	 *
	 * @param argv the command line, contains the filenames to run
	 *             the scanner on.
	 */
	public static void main(String argv[]) {
		if (argv.length == 0) {
			System.out.println("Usage : java _BeetlLexer [ --encoding <name> ] <inputfile(s)>");
		} else {
			int firstFilePos = 0;
			String encodingName = "UTF-8";
			if (argv[0].equals("--encoding")) {
				firstFilePos = 2;
				encodingName = argv[1];
				try {
					java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
				} catch (Exception e) {
					System.out.println("Invalid encoding '" + encodingName + "'");
					return;
				}
			}
			for (int i = firstFilePos; i < argv.length; i++) {
				_BeetlLexer scanner = null;
				try {
					java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
					java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
					scanner = new _BeetlLexer(reader);
					do {
						System.out.println(scanner.advance());
					} while (!scanner.zzAtEOF);

				} catch (java.io.FileNotFoundException e) {
					System.out.println("File not found : \"" + argv[i] + "\"");
				} catch (java.io.IOException e) {
					System.out.println("IO error scanning file \"" + argv[i] + "\"");
					System.out.println(e);
				} catch (Exception e) {
					System.out.println("Unexpected exception:");
					e.printStackTrace();
				}
			}
		}
	}


}

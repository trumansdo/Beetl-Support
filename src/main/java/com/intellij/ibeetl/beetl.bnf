{
	/*定义parser类全限定名*/
  parserClass='com.intellij.ibeetl.parser.BeetlParser'
  /*每个Java类头部的版权申明*/
  classHeader='copyrightHeader.java'
  /*所有的psi node接口的扩展*/
//  implements='com.intellij.ibeetl.psi.BeetlElement'
  /*所有的psi node接口或者实现类的扩展，后面的extends语法覆盖前面出现的，每一个语法自己的extends会覆盖全局的
    简单来说，越是精确的，越是优先度高
    例如：下面extends Expression节点，声明所有的Expr/Literal/Lit的接口和实现类分别扩展Expression节点的接口和实现类
  */
  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'

  elementTypeHolderClass='com.intellij.ibeetl.GoTypes'
  elementTypeClass='com.intellij.ibeetl.psi.BeetlElementType'
  tokenTypeClass='com.intellij.ibeetl.psi.BeetlTokenType'
  psiTreeUtilClass='com.intellij.ibeetl.psi.BeetlPsiTreeUtil'

  psiClassPrefix='Beetl'
  psiImplClassSuffix='Impl'
  psiPackage='com.intellij.ibeetl.psi'
  psiImplPackage='com.intellij.ibeetl.psi.impl'
  psiImplUtilClass="com.intellij.ibeetl.psi.impl.GoPsiImplUtil"
  parserUtilClass="com.intellij.ibeetl.parser.GoParserUtil"

  tokens=[
    LBRACE               =  '{'
    RBRACE               =  '}'
    LBRACK               =  '['
    RBRACK               =  ']'
    LPAREN               =  '('
    RPAREN               =  ')'
    LDELIMITER           =  '<!--#'
    RDELIMITER           =  '-->'
    HTMLTAG              =  'layui:'
    COLON                =  ':'
    SEMICOLON            =  ';'
    COMMA                =  ','
    EQ                   =  '=='
    ASSIGN               =  '='
    NOT_EQ               =  '!='
    NOT                  =  '!'
    INCREASE             =  '++'
    PLUS_ASSIGN          =  '+='
    PLUS                 =  '+'
    DECREASE             =  '--'
    MINUS_ASSIGN         =  '-='
    MINUS                =  '-'
    COND_OR              =  '||'
    BIT_OR_ASSIGN        =  '|='
    COND_AND             =  '&&'
    BIT_AND_ASSIGN       =  '&='
    BIT_AND              =  '&'
    BIT_OR               =  '|'
    SHIFT_LEFT           =  '<<'
    LESS_OR_EQUAL        =  '<='
    LESS                 =  '<'
    BIT_XOR_ASSIGN       =  '^='
    BIT_XOR              =  '^'
    MUL_ASSIGN           =  '*='
    MUL                  =  '*'
    QUOTIENT_ASSIGN      =  '/='
    QUOTIENT             =  '/'
    REMAINDER_ASSIGN     =  '%='
    REMAINDER            =  '%'
    SHIFT_RIGHT          =  '>>'
    GREATER_OR_EQUAL     =  '>='
    GREATER              =  '>'
    DOT                  =  '.'
    SEMICOLON_SYNTHETIC  = '<NL>'
    TYPE_                = 'type'
  ]
  extends("(Or|And|Add|Minus|Mul|Quotient|Conditional)Expr")=BinaryExpr
  extends(".*(Expr|Literal|Lit)")=Expression

  generateTokenAccessors=true
}
/*
将整个beetl 语法分为三部分：
1. 定界符包含的语法 { 关键字，表达式{} }
2. html标签函数
3. 引用属性
*/
File ::= (ldelimiter Statement* rdelimiter) | HtmlFunc

Statement ::=
      VarDeclaration
    | SimpleStatement
    | IfStatement
    | SwitchStatement
    | SelectStatement
    | ForStatement
/*满足 变量定义语法*/
VarDeclaration ::= var identifier (assign (Expression | Literal))? (semicolon identifier (assign (Expression | Literal))?)* ';' {pin(".*")=1}

HtmlFunc ::=

Expression ::=
    OrExpr
  | AndExpr
  | ConditionalExpr
  | AddExpr
  | MulExpr
  | UnaryExpr
  | ConversionExpr
  | MaxGroup
  | ParenthesesExpr {methods=[getGoType] implements="com.goide.psi.GoTypeOwner"}

fake BinaryExpr ::= Expression+ {
  methods=[left="Expression[0]" right="Expression[1]" getOperator]
}
Literal ::= string | int | float | oct | hex